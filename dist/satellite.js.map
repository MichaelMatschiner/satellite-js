{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 49ea3759002468c73566","webpack:///./constants.js","webpack:///./gstime/jday.js","webpack:///./sgp4.js","webpack:///./gstime/gstime.js","webpack:///./transforms/geodeticToEcf.js","webpack:///./dpper.js","webpack:///./dopplerFactor.js","webpack:///./propagate/propagate.js","webpack:///./propagate/twoline2satrec.js","webpack:///./transforms/degreesLat.js","webpack:///./transforms/degreesLong.js","webpack:///./transforms/ecfToEci.js","webpack:///./transforms/ecfToLookAngles.js","webpack:///./transforms/eciToEcf.js","webpack:///./transforms/eciToGeodetic.js","webpack:///./dscom.js","webpack:///./dsinit.js","webpack:///./dspace.js","webpack:///./gstime/days2mdhms.js","webpack:///./index.js","webpack:///./initl.js","webpack:///./sgp4init.js","webpack:///./transforms/topocentric.js","webpack:///./transforms/topocentricToLookAngles.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AChEA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;ACjCA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oC;;;;;;;AChCA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,UAAU;AACV;AACA,oC;;;;;;;AC/dA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6HAA6H;AAC7H,8DAA8D;;AAE9D;AACA;AACA;AACA;;AAEA;AACA;AACA,oC;;;;;;;AC/CA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;AC1BA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;ACrQA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA,oC;;;;;;;AC3BA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,kCAAkC,0BAA0B,0CAA0C,gBAAgB,OAAO,kBAAkB,EAAE,aAAa,EAAE,OAAO,wBAAwB,EAAE;;AAEjM;AACA,iEAAiE,aAAa;AAC9E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;ACjCA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA,iCAAiC;AACjC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA,oC;;;;;;;AC1HA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;ACfA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,oC;;;;;;;AClBA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,oC;;;;;;;AClBA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA,oC;;;;;;;ACrBA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;AC7BA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,oC;;;;;;;AC1BA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oC;;;;;;;AClaqCAAqC;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;ACxZA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;ACtPA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;ACxEA;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,oC;;;;;;;ACzFA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;ACtJA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgmBAAmB,oBAAoB;AACvC,qBAAqB,iBAAiB;AACtC,mBAAmB,gBAAgB;AACnC,kBAAkB,mBAAmB;AACrC,uBAAuB,oBAAoB;AAC3C,iBAAiB,mBAAmB;AACpC,qBAAqB,mBAAmB;AACxC,sBAAsB,kBAAkB;AACxC,qBAAqB,mBAAmB;;AAExC;AACA,kBAAkB,mBAAmB;AACrC,qBAAqB,mBAAmB;AACxC,qBAAqB,mBAAmB;AACxC,qBAAqB,mBAAmB;AACxC,oBAAoB,kBAAkB;AACtC,oBAAoB,kBAAkB;AACtC,qBAAqB,gBAAgB;AACrC,mBAAmB,kBAAkB;AACrC,qBAAqB,iBAAiB;AACtC,mBAAmB,kBAAkB;AACrC,oBAAoB,iBAAiB;AACrC,mBAAmB,iBAAiB;AACpC,mBAAmB,iBAAiB;AACpC,qBAAqB,kBAAkB;AACvC,oBAAoB,iBAAiB;AACrC,mBAAmB,iBAAiB;AACpC,mBAAmB,iBAAiB;AACpC,oBAAoB,kBAAkB;AACtC,mBAAmB;;AAEnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,oC;;;;;;;AC3rBA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,UAAU;AACV;AACA,oC;;;;;;;ACnCA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa;AACb,G","file":"satellite.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"satellite\"] = factory();\n\telse\n\t\troot[\"satellite\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 19);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 49ea3759002468c73566","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar pi = exports.pi = Math.PI;\nvar twoPi = exports.twoPi = pi * 2;\nvar deg2rad = exports.deg2rad = pi / 180.0;\nvar rad2deg = exports.rad2deg = 180 / pi;\nvar minutesPerDay = exports.minutesPerDay = 1440.0;\nvar mu = exports.mu = 398600.5; // in km3 / s2\nvar earthRadius = exports.earthRadius = 6378.137; // in km\nvar xke = exports.xke = 60.0 / Math.sqrt(earthRadius * earthRadius * earthRadius / mu);\nvar j2 = exports.j2 = 0.00108262998905;\nvar j3 = exports.j3 = -0.00000253215306;\nvar j4 = exports.j4 = -0.00000161098761;\nvar j3oj2 = exports.j3oj2 = j3 / j2;\nvar x2o3 = exports.x2o3 = 2.0 / 3.0;\n\nexports.default = {\n  pi: pi,\n  twoPi: twoPi,\n  deg2rad: deg2rad,\n  rad2deg: rad2deg,\n  minutesPerDay: minutesPerDay,\n  mu: mu,\n  earthRadius: earthRadius,\n  xke: xke,\n  j2: j2,\n  j3: j3,\n  j4: j4,\n  j3oj2: j3oj2,\n  x2o3: x2o3\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./constants.js\n// module id = 0\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = jday;\nfunction jdayInternal(year, mon, day, hr, minute, sec) {\n  /*\n  return (\n    (367.0 * year) -\n    (Math.floor((7 * (year + Math.floor((mon + 9) / 12.0))) * 0.25) +\n    Math.floor((275 * mon) / 9.0) +\n    day + 1721013.5 +\n    (((((sec / 60.0) + minute) / 60.0) + hr) / 24.0)) // ut in days\n    // # - 0.5*sgn(100.0*year + mon - 190002.5) + 0.5;\n  );\n  */\n\n  return 367.0 * year - Math.floor(7 * (year + Math.floor((mon + 9) / 12.0)) * 0.25) + Math.floor(275 * mon / 9.0) + day + 1721013.5 + ((sec / 60.0 + minute) / 60.0 + hr) / 24.0 //  ut in days\n  //#  - 0.5*sgn(100.0*year + mon - 190002.5) + 0.5;\n  ;\n}\n\nfunction jday(year, mon, day, hr, minute, sec) {\n  if (year instanceof Date) {\n    var date = year;\n    return jdayInternal(date.getUTCFullYear(), date.getUTCMonth() + 1, // Note, this function requires months in range 1-12.\n    date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());\n  }\n\n  return jdayInternal(year, mon, day, hr, minute, sec);\n}\nmodule.exports = exports[\"default\"];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./gstime/jday.js\n// module id = 1\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = sgp4;\n\nvar _dpper = require('./dpper');\n\nvar _dpper2 = _interopRequireDefault(_dpper);\n\nvar _dspace = require('./dspace');\n\nvar _dspace2 = _interopRequireDefault(_dspace);\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*-----------------------------------------------------------------------------\n *\n *                             procedure sgp4\n *\n *  this procedure is the sgp4 prediction model from space command. this is an\n *    updated and combined version of sgp4 and sdp4, which were originally\n *    published separately in spacetrack report //3. this version follows the\n *    methodology from the aiaa paper (2006) describing the history and\n *    development of the code.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    satrec  - initialised structure from sgp4init() call.\n *    tsince  - time since epoch (minutes)\n *\n *  outputs       :\n *    r           - position vector                     km\n *    v           - velocity                            km/sec\n *  return code - non-zero on error.\n *                   1 - mean elements, ecc >= 1.0 or ecc < -0.001 or a < 0.95 er\n *                   2 - mean motion less than 0.0\n *                   3 - pert elements, ecc < 0.0  or  ecc > 1.0\n *                   4 - semi-latus rectum < 0.0\n *                   5 - epoch elements are sub-orbital\n *                   6 - satellite has decayed\n *\n *  locals        :\n *    am          -\n *    axnl, aynl        -\n *    betal       -\n *    cosim   , sinim   , cosomm  , sinomm  , cnod    , snod    , cos2u   ,\n *    sin2u   , coseo1  , sineo1  , cosi    , sini    , cosip   , sinip   ,\n *    cosisq  , cossu   , sinsu   , cosu    , sinu\n *    delm        -\n *    delomg      -\n *    dndt        -\n *    eccm        -\n *    emsq        -\n *    ecose       -\n *    el2         -\n *    eo1         -\n *    eccp        -\n *    esine       -\n *    argpm       -\n *    argpp       -\n *    omgadf      -\n *    pl          -\n *    r           -\n *    rtemsq      -\n *    rdotl       -\n *    rl          -\n *    rvdot       -\n *    rvdotl      -\n *    su          -\n *    t2  , t3   , t4    , tc\n *    tem5, temp , temp1 , temp2  , tempa  , tempe  , templ\n *    u   , ux   , uy    , uz     , vx     , vy     , vz\n *    inclm       - inclination\n *    mm          - mean anomaly\n *    nm          - mean motion\n *    nodem       - right asc of ascending node\n *    xinc        -\n *    xincp       -\n *    xl          -\n *    xlm         -\n *    mp          -\n *    xmdf        -\n *    xmx         -\n *    xmy         -\n *    nodedf      -\n *    xnode       -\n *    nodep       -\n *    np          -\n *\n *  coupling      :\n *    getgravconst-\n *    dpper\n *    dspace\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report //3 1980\n *    hoots, norad spacetrack report //6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\nfunction sgp4(satrec, tsince) {\n  var am = void 0,\n      axnl = void 0,\n      aynl = void 0,\n      betal = void 0,\n      cosim = void 0,\n      sinim = void 0,\n      cnod = void 0,\n      snod = void 0,\n      cos2u = void 0,\n      sin2u = void 0,\n      coseo1 = void 0,\n      sineo1 = void 0,\n      cosi = void 0,\n      sini = void 0,\n      cosip = void 0,\n      sinip = void 0,\n      cosisq = void 0,\n      cossu = void 0,\n      sinsu = void 0,\n      cosu = void 0,\n      sinu = void 0,\n      delm = void 0,\n      delomg = void 0,\n      dndt = void 0,\n      emsq = void 0,\n      ecose = void 0,\n      el2 = void 0,\n      eo1 = void 0,\n      esine = void 0,\n      argpm = void 0,\n      argpp = void 0,\n      pl = void 0,\n      r = void 0,\n      v = void 0,\n      rdotl = void 0,\n      rl = void 0,\n      rvdot = void 0,\n      rvdotl = void 0,\n      su = void 0,\n      t2 = void 0,\n      t3 = void 0,\n      t4 = void 0,\n      tc = void 0,\n      tem5 = void 0,\n      temp = void 0,\n      temp1 = void 0,\n      temp2 = void 0,\n      tempa = void 0,\n      tempe = void 0,\n      templ = void 0,\n      u = void 0,\n      ux = void 0,\n      uy = void 0,\n      uz = void 0,\n      vx = void 0,\n      vy = void 0,\n      vz = void 0,\n      inclm = void 0,\n      mm = void 0,\n      nm = void 0,\n      nodem = void 0,\n      xinc = void 0,\n      xincp = void 0,\n      xl = void 0,\n      xlm = void 0,\n      mp = void 0,\n      xmdf = void 0,\n      xmx = void 0,\n      xmy = void 0,\n      nodedf = void 0,\n      xnode = void 0,\n      nodep = void 0;\n\n  // TODO: defined but never used\n  // var cosomm, sinomm, eccm, eccp, omgadf, rtemsq, np;\n\n  var mrt = 0.0;\n\n  /* ------------------ set mathematical constants --------------- */\n  // sgp4fix divisor for divide by zero check on inclination\n  // the old check used 1.0 + cos(pi-1.0e-9), but then compared it to\n  // 1.5 e-12, so the threshold was changed to 1.5e-12 for consistency\n\n  var temp4 = 1.5e-12;\n\n  var vkmpersec = _constants.earthRadius * _constants.xke / 60.0;\n\n  //  --------------------- clear sgp4 error flag -----------------\n  satrec.t = tsince;\n  satrec.error = 0;\n\n  //  ------- update for secular gravity and atmospheric drag -----\n  xmdf = satrec.mo + satrec.mdot * satrec.t;\n  var argpdf = satrec.argpo + satrec.argpdot * satrec.t;\n  nodedf = satrec.nodeo + satrec.nodedot * satrec.t;\n  argpm = argpdf;\n  mm = xmdf;\n  t2 = satrec.t * satrec.t;\n  nodem = nodedf + satrec.nodecf * t2;\n  tempa = 1.0 - satrec.cc1 * satrec.t;\n  tempe = satrec.bstar * satrec.cc4 * satrec.t;\n  templ = satrec.t2cof * t2;\n\n  if (satrec.isimp !== 1) {\n    delomg = satrec.omgcof * satrec.t;\n    //  sgp4fix use mutliply for speed instead of pow\n    var delmtemp = 1.0 + satrec.eta * Math.cos(xmdf);\n    delm = satrec.xmcof * (delmtemp * delmtemp * delmtemp - satrec.delmo);\n    temp = delomg + delm;\n    mm = xmdf + temp;\n    argpm = argpdf - temp;\n    t3 = t2 * satrec.t;\n    t4 = t3 * satrec.t;\n    tempa = tempa - satrec.d2 * t2 - satrec.d3 * t3 - satrec.d4 * t4;\n    tempe += satrec.bstar * satrec.cc5 * (Math.sin(mm) - satrec.sinmao);\n    templ = templ + satrec.t3cof * t3 + t4 * (satrec.t4cof + satrec.t * satrec.t5cof);\n  }\n  nm = satrec.no;\n  var em = satrec.ecco;\n  inclm = satrec.inclo;\n  if (satrec.method === 'd') {\n    tc = satrec.t;\n\n    var dspaceParameters = {\n      irez: satrec.irez,\n      d2201: satrec.d2201,\n      d2211: satrec.d2211,\n      d3210: satrec.d3210,\n      d3222: satrec.d3222,\n      d4410: satrec.d4410,\n      d4422: satrec.d4422,\n      d5220: satrec.d5220,\n      d5232: satrec.d5232,\n      d5421: satrec.d5421,\n      d5433: satrec.d5433,\n      dedt: satrec.dedt,\n      del1: satrec.del1,\n      del2: satrec.del2,\n      del3: satrec.del3,\n      didt: satrec.didt,\n      dmdt: satrec.dmdt,\n      dnodt: satrec.dnodt,\n      domdt: satrec.domdt,\n      argpo: satrec.argpo,\n      argpdot: satrec.argpdot,\n      t: satrec.t,\n      tc: tc,\n      gsto: satrec.gsto,\n      xfact: satrec.xfact,\n      xlamo: satrec.xlamo,\n      no: satrec.no,\n      atime: satrec.atime,\n      em: em,\n      argpm: argpm,\n      inclm: inclm,\n      xli: satrec.xli,\n      mm: mm,\n      xni: satrec.xni,\n      nodem: nodem,\n      nm: nm\n    };\n\n    var dspaceResult = (0, _dspace2.default)(dspaceParameters);\n\n    // TODO: defined but never used\n    // var atime = dspaceResult.atime;\n\n    em = dspaceResult.em;\n    argpm = dspaceResult.argpm;\n    inclm = dspaceResult.inclm;\n\n    // TODO: defined but never used\n    // var xli = dspaceResult.xli;\n\n    mm = dspaceResult.mm;\n\n    // TODO: defined but never used\n    // var xni = dspaceResult.xni;\n\n    nodem = dspaceResult.nodem;\n    dndt = dspaceResult.dndt;\n    nm = dspaceResult.nm;\n  }\n\n  if (nm <= 0.0) {\n    //  printf(\"// error nm %f\\n\", nm);\n    satrec.error = 2;\n    //  sgp4fix add return\n    return [false, false];\n  }\n  am = Math.pow(_constants.xke / nm, _constants.x2o3) * tempa * tempa;\n  nm = _constants.xke / Math.pow(am, 1.5);\n  em -= tempe;\n\n  //  fix tolerance for error recognition\n  //  sgp4fix am is fixed from the previous nm check\n  if (em >= 1.0 || em < -0.001) {\n    // || (am < 0.95)\n    //  printf(\"// error em %f\\n\", em);\n    satrec.error = 1;\n    //  sgp4fix to return if there is an error in eccentricity\n    return [false, false];\n  }\n  //  sgp4fix fix tolerance to avoid a divide by zero\n  if (em < 1.0e-6) {\n    em = 1.0e-6;\n  }\n  mm += satrec.no * templ;\n  xlm = mm + argpm + nodem;\n  emsq = em * em;\n  temp = 1.0 - emsq;\n\n  nodem %= _constants.twoPi;\n  argpm %= _constants.twoPi;\n  xlm %= _constants.twoPi;\n  mm = (xlm - argpm - nodem) % _constants.twoPi;\n\n  //  ----------------- compute extra mean quantities -------------\n  sinim = Math.sin(inclm);\n  cosim = Math.cos(inclm);\n\n  //  -------------------- add lunar-solar periodics --------------\n  var ep = em;\n  xincp = inclm;\n  argpp = argpm;\n  nodep = nodem;\n  mp = mm;\n  sinip = sinim;\n  cosip = cosim;\n  if (satrec.method === 'd') {\n    var dpperParameters = {\n      inclo: satrec.inclo,\n      init: 'n',\n      ep: ep,\n      inclp: xincp,\n      nodep: nodep,\n      argpp: argpp,\n      mp: mp,\n      opsmode: satrec.operationmod\n    };\n\n    var dpperResult = (0, _dpper2.default)(satrec, dpperParameters);\n    ep = dpperResult.ep;\n    xincp = dpperResult.inclp;\n    nodep = dpperResult.nodep;\n    argpp = dpperResult.argpp;\n    mp = dpperResult.mp;\n\n    if (xincp < 0.0) {\n      xincp = -xincp;\n      nodep += _constants.pi;\n      argpp -= _constants.pi;\n    }\n    if (ep < 0.0 || ep > 1.0) {\n      //  printf(\"// error ep %f\\n\", ep);\n      satrec.error = 3;\n      //  sgp4fix add return\n      return [false, false];\n    }\n  }\n  //  -------------------- long period periodics ------------------\n  if (satrec.method === 'd') {\n    sinip = Math.sin(xincp);\n    cosip = Math.cos(xincp);\n    satrec.aycof = -0.5 * _constants.j3oj2 * sinip;\n    //  sgp4fix for divide by zero for xincp = 180 deg\n    if (Math.abs(cosip + 1.0) > 1.5e-12) {\n      satrec.xlcof = -0.25 * _constants.j3oj2 * sinip * (3.0 + 5.0 * cosip) / (1.0 + cosip);\n    } else {\n      satrec.xlcof = -0.25 * _constants.j3oj2 * sinip * (3.0 + 5.0 * cosip) / temp4;\n    }\n  }\n  axnl = ep * Math.cos(argpp);\n  temp = 1.0 / (am * (1.0 - ep * ep));\n  aynl = ep * Math.sin(argpp) + temp * satrec.aycof;\n  xl = mp + argpp + nodep + temp * satrec.xlcof * axnl;\n\n  //  --------------------- solve kepler's equation ---------------\n  u = (xl - nodep) % _constants.twoPi;\n  eo1 = u;\n  tem5 = 9999.9;\n  var ktr = 1;\n  //    sgp4fix for kepler iteration\n  //    the following iteration needs better limits on corrections\n  while (Math.abs(tem5) >= 1.0e-12 && ktr <= 10) {\n    sineo1 = Math.sin(eo1);\n    coseo1 = Math.cos(eo1);\n    tem5 = 1.0 - coseo1 * axnl - sineo1 * aynl;\n    tem5 = (u - aynl * coseo1 + axnl * sineo1 - eo1) / tem5;\n    if (Math.abs(tem5) >= 0.95) {\n      if (tem5 > 0.0) {\n        tem5 = 0.95;\n      } else {\n        tem5 = -0.95;\n      }\n    }\n    eo1 += tem5;\n    ktr += 1;\n  }\n  //  ------------- short period preliminary quantities -----------\n  ecose = axnl * coseo1 + aynl * sineo1;\n  esine = axnl * sineo1 - aynl * coseo1;\n  el2 = axnl * axnl + aynl * aynl;\n  pl = am * (1.0 - el2);\n  if (pl < 0.0) {\n    //  printf(\"// error pl %f\\n\", pl);\n    satrec.error = 4;\n    //  sgp4fix add return\n    return [false, false];\n  }\n\n  rl = am * (1.0 - ecose);\n  rdotl = Math.sqrt(am) * esine / rl;\n  rvdotl = Math.sqrt(pl) / rl;\n  betal = Math.sqrt(1.0 - el2);\n  temp = esine / (1.0 + betal);\n  sinu = am / rl * (sineo1 - aynl - axnl * temp);\n  cosu = am / rl * (coseo1 - axnl + aynl * temp);\n  su = Math.atan2(sinu, cosu);\n  sin2u = (cosu + cosu) * sinu;\n  cos2u = 1.0 - 2.0 * sinu * sinu;\n  temp = 1.0 / pl;\n  temp1 = 0.5 * _constants.j2 * temp;\n  temp2 = temp1 * temp;\n\n  //  -------------- update for short period periodics ------------\n  if (satrec.method === 'd') {\n    cosisq = cosip * cosip;\n    satrec.con41 = 3.0 * cosisq - 1.0;\n    satrec.x1mth2 = 1.0 - cosisq;\n    satrec.x7thm1 = 7.0 * cosisq - 1.0;\n  }\n  mrt = rl * (1.0 - 1.5 * temp2 * betal * satrec.con41) + 0.5 * temp1 * satrec.x1mth2 * cos2u;\n  su -= 0.25 * temp2 * satrec.x7thm1 * sin2u;\n  xnode = nodep + 1.5 * temp2 * cosip * sin2u;\n  xinc = xincp + 1.5 * temp2 * cosip * sinip * cos2u;\n  var mvt = rdotl - nm * temp1 * satrec.x1mth2 * sin2u / _constants.xke;\n  rvdot = rvdotl + nm * temp1 * (satrec.x1mth2 * cos2u + 1.5 * satrec.con41) / _constants.xke;\n\n  //  --------------------- orientation vectors -------------------\n  sinsu = Math.sin(su);\n  cossu = Math.cos(su);\n  snod = Math.sin(xnode);\n  cnod = Math.cos(xnode);\n  sini = Math.sin(xinc);\n  cosi = Math.cos(xinc);\n  xmx = -snod * cosi;\n  xmy = cnod * cosi;\n  ux = xmx * sinsu + cnod * cossu;\n  uy = xmy * sinsu + snod * cossu;\n  uz = sini * sinsu;\n  vx = xmx * cossu - cnod * sinsu;\n  vy = xmy * cossu - snod * sinsu;\n  vz = sini * cossu;\n\n  //  --------- position and velocity (in km and km/sec) ----------\n  r = { x: 0.0, y: 0.0, z: 0.0 };\n  r.x = mrt * ux * _constants.earthRadius;\n  r.y = mrt * uy * _constants.earthRadius;\n  r.z = mrt * uz * _constants.earthRadius;\n  v = { x: 0.0, y: 0.0, z: 0.0 };\n  v.x = (mvt * ux + rvdot * vx) * vkmpersec;\n  v.y = (mvt * uy + rvdot * vy) * vkmpersec;\n  v.z = (mvt * uz + rvdot * vz) * vkmpersec;\n\n  //  sgp4fix for decaying satellites\n  if (mrt < 1.0) {\n    // printf(\"// decay condition %11.6f \\n\",mrt);\n    satrec.error = 6;\n    return { position: false, velocity: false };\n  }\n  return { position: r, velocity: v };\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sgp4.js\n// module id = 2\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = gstime;\n\nvar _constants = require('../constants');\n\n/* -----------------------------------------------------------------------------\n *\n *                           function gstime\n *\n *  this function finds the greenwich sidereal time.\n *\n *  author        : david vallado                  719-573-2600    1 mar 2001\n *\n *  inputs          description                    range / units\n *    jdut1       - julian date in ut1             days from 4713 bc\n *\n *  outputs       :\n *    gstime      - greenwich sidereal time        0 to 2pi rad\n *\n *  locals        :\n *    temp        - temporary variable for doubles   rad\n *    tut1        - julian centuries from the\n *                  jan 1, 2000 12 h epoch (ut1)\n *\n *  coupling      :\n *    none\n *\n *  references    :\n *    vallado       2004, 191, eq 3-45\n * --------------------------------------------------------------------------- */\nfunction gstime(jdut1) {\n  var tut1 = (jdut1 - 2451545.0) / 36525.0;\n\n  var temp = -6.2e-6 * tut1 * tut1 * tut1 + 0.093104 * tut1 * tut1 + (876600.0 * 3600 + 8640184.812866) * tut1 + 67310.54841; // # sec\n  temp = temp * _constants.deg2rad / 240.0 % _constants.twoPi; // 360/86400 = 1/240, to deg, to rad\n\n  //  ------------------------ check quadrants ---------------------\n  if (temp < 0.0) {\n    temp += _constants.twoPi;\n  }\n\n  return temp;\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./gstime/gstime.js\n// module id = 3\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = geodeticToEcf;\nfunction geodeticToEcf(geodeticCoords) {\n  var longitude = geodeticCoords.longitude;\n  var latitude = geodeticCoords.latitude;\n  var height = geodeticCoords.height;\n  var a = 6378.137;\n  var b = 6356.7523142;\n  var f = (a - b) / a;\n  var e2 = 2 * f - f * f;\n  var normal = a / Math.sqrt(1 - e2 * (Math.sin(latitude) * Math.sin(latitude)));\n\n  var x = (normal + height) * Math.cos(latitude) * Math.cos(longitude);\n  var y = (normal + height) * Math.cos(latitude) * Math.sin(longitude);\n  var z = (normal * (1 - e2) + height) * Math.sin(latitude);\n\n  return {\n    x: x,\n    y: y,\n    z: z\n  };\n}\nmodule.exports = exports[\"default\"];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./transforms/geodeticToEcf.js\n// module id = 4\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = dpper;\n\nvar _constants = require('./constants');\n\n/* -----------------------------------------------------------------------------\n *\n *                           procedure dpper\n *\n *  this procedure provides deep space long period periodic contributions\n *    to the mean elements.  by design, these periodics are zero at epoch.\n *    this used to be dscom which included initialization, but it's really a\n *    recurring function.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    e3          -\n *    ee2         -\n *    peo         -\n *    pgho        -\n *    pho         -\n *    pinco       -\n *    plo         -\n *    se2 , se3 , sgh2, sgh3, sgh4, sh2, sh3, si2, si3, sl2, sl3, sl4 -\n *    t           -\n *    xh2, xh3, xi2, xi3, xl2, xl3, xl4 -\n *    zmol        -\n *    zmos        -\n *    ep          - eccentricity                           0.0 - 1.0\n *    inclo       - inclination - needed for lyddane modification\n *    nodep       - right ascension of ascending node\n *    argpp       - argument of perigee\n *    mp          - mean anomaly\n *\n *  outputs       :\n *    ep          - eccentricity                           0.0 - 1.0\n *    inclp       - inclination\n *    nodep        - right ascension of ascending node\n *    argpp       - argument of perigee\n *    mp          - mean anomaly\n *\n *  locals        :\n *    alfdp       -\n *    betdp       -\n *    cosip  , sinip  , cosop  , sinop  ,\n *    dalf        -\n *    dbet        -\n *    dls         -\n *    f2, f3      -\n *    pe          -\n *    pgh         -\n *    ph          -\n *    pinc        -\n *    pl          -\n *    sel   , ses   , sghl  , sghs  , shl   , shs   , sil   , sinzf , sis   ,\n *    sll   , sls\n *    xls         -\n *    xnoh        -\n *    zf          -\n *    zm          -\n *\n *  coupling      :\n *    none.\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\nfunction dpper(satrec, options) {\n  var e3 = satrec.e3,\n      ee2 = satrec.ee2,\n      peo = satrec.peo,\n      pgho = satrec.pgho,\n      pho = satrec.pho,\n      pinco = satrec.pinco,\n      plo = satrec.plo,\n      se2 = satrec.se2,\n      se3 = satrec.se3,\n      sgh2 = satrec.sgh2,\n      sgh3 = satrec.sgh3,\n      sgh4 = satrec.sgh4,\n      sh2 = satrec.sh2,\n      sh3 = satrec.sh3,\n      si2 = satrec.si2,\n      si3 = satrec.si3,\n      sl2 = satrec.sl2,\n      sl3 = satrec.sl3,\n      sl4 = satrec.sl4,\n      t = satrec.t,\n      xgh2 = satrec.xgh2,\n      xgh3 = satrec.xgh3,\n      xgh4 = satrec.xgh4,\n      xh2 = satrec.xh2,\n      xh3 = satrec.xh3,\n      xi2 = satrec.xi2,\n      xi3 = satrec.xi3,\n      xl2 = satrec.xl2,\n      xl3 = satrec.xl3,\n      xl4 = satrec.xl4,\n      zmol = satrec.zmol,\n      zmos = satrec.zmos;\n  var init = options.init,\n      opsmode = options.opsmode;\n  var ep = options.ep,\n      inclp = options.inclp,\n      nodep = options.nodep,\n      argpp = options.argpp,\n      mp = options.mp;\n\n  // Copy satellite attributes into local variables for convenience\n  // and symmetry in writing formulae.\n\n  var alfdp = void 0;\n  var betdp = void 0;\n  var cosip = void 0;\n  var sinip = void 0;\n  var cosop = void 0;\n  var sinop = void 0;\n  var dalf = void 0;\n  var dbet = void 0;\n  var dls = void 0;\n  var f2 = void 0;\n  var f3 = void 0;\n  var pe = void 0;\n  var pgh = void 0;\n  var ph = void 0;\n  var pinc = void 0;\n  var pl = void 0;\n  var sinzf = void 0;\n  var xls = void 0;\n  var xnoh = void 0;\n  var zf = void 0;\n  var zm = void 0;\n\n  //  ---------------------- constants -----------------------------\n  var zns = 1.19459e-5;\n  var zes = 0.01675;\n  var znl = 1.5835218e-4;\n  var zel = 0.05490;\n\n  //  --------------- calculate time varying periodics -----------\n  zm = zmos + zns * t;\n\n  // be sure that the initial call has time set to zero\n  if (init === 'y') {\n    zm = zmos;\n  }\n  zf = zm + 2.0 * zes * Math.sin(zm);\n  sinzf = Math.sin(zf);\n  f2 = 0.5 * sinzf * sinzf - 0.25;\n  f3 = -0.5 * sinzf * Math.cos(zf);\n\n  var ses = se2 * f2 + se3 * f3;\n  var sis = si2 * f2 + si3 * f3;\n  var sls = sl2 * f2 + sl3 * f3 + sl4 * sinzf;\n  var sghs = sgh2 * f2 + sgh3 * f3 + sgh4 * sinzf;\n  var shs = sh2 * f2 + sh3 * f3;\n\n  zm = zmol + znl * t;\n  if (init === 'y') {\n    zm = zmol;\n  }\n\n  zf = zm + 2.0 * zel * Math.sin(zm);\n  sinzf = Math.sin(zf);\n  f2 = 0.5 * sinzf * sinzf - 0.25;\n  f3 = -0.5 * sinzf * Math.cos(zf);\n\n  var sel = ee2 * f2 + e3 * f3;\n  var sil = xi2 * f2 + xi3 * f3;\n  var sll = xl2 * f2 + xl3 * f3 + xl4 * sinzf;\n  var sghl = xgh2 * f2 + xgh3 * f3 + xgh4 * sinzf;\n  var shll = xh2 * f2 + xh3 * f3;\n\n  pe = ses + sel;\n  pinc = sis + sil;\n  pl = sls + sll;\n  pgh = sghs + sghl;\n  ph = shs + shll;\n\n  if (init === 'n') {\n    pe -= peo;\n    pinc -= pinco;\n    pl -= plo;\n    pgh -= pgho;\n    ph -= pho;\n    inclp += pinc;\n    ep += pe;\n    sinip = Math.sin(inclp);\n    cosip = Math.cos(inclp);\n\n    /* ----------------- apply periodics directly ------------ */\n    // sgp4fix for lyddane choice\n    // strn3 used original inclination - this is technically feasible\n    // gsfc used perturbed inclination - also technically feasible\n    // probably best to readjust the 0.2 limit value and limit discontinuity\n    // 0.2 rad = 11.45916 deg\n    // use next line for original strn3 approach and original inclination\n    // if (inclo >= 0.2)\n    // use next line for gsfc version and perturbed inclination\n    if (inclp >= 0.2) {\n      ph /= sinip;\n      pgh -= cosip * ph;\n      argpp += pgh;\n      nodep += ph;\n      mp += pl;\n    } else {\n      //  ---- apply periodics with lyddane modification ----\n      sinop = Math.sin(nodep);\n      cosop = Math.cos(nodep);\n      alfdp = sinip * sinop;\n      betdp = sinip * cosop;\n      dalf = ph * cosop + pinc * cosip * sinop;\n      dbet = -ph * sinop + pinc * cosip * cosop;\n      alfdp += dalf;\n      betdp += dbet;\n      nodep %= _constants.twoPi;\n\n      //  sgp4fix for afspc written intrinsic functions\n      //  nodep used without a trigonometric function ahead\n      if (nodep < 0.0 && opsmode === 'a') {\n        nodep += _constants.twoPi;\n      }\n      xls = mp + argpp + cosip * nodep;\n      dls = pl + pgh - pinc * nodep * sinip;\n      xls += dls;\n      xnoh = nodep;\n      nodep = Math.atan2(alfdp, betdp);\n\n      //  sgp4fix for afspc written intrinsic functions\n      //  nodep used without a trigonometric function ahead\n      if (nodep < 0.0 && opsmode === 'a') {\n        nodep += _constants.twoPi;\n      }\n      if (Math.abs(xnoh - nodep) > _constants.pi) {\n        if (nodep < xnoh) {\n          nodep += _constants.twoPi;\n        } else {\n          nodep -= _constants.twoPi;\n        }\n      }\n      mp += pl;\n      argpp = xls - mp - cosip * nodep;\n    }\n  }\n\n  return {\n    ep: ep,\n    inclp: inclp,\n    nodep: nodep,\n    argpp: argpp,\n    mp: mp\n  };\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./dpper.js\n// module id = 5\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = dopplerFactor;\nfunction dopplerFactor(location, position, velocity) {\n  var currentRange = Math.sqrt(Math.pow(position.x - location.x, 2) + Math.pow(position.y - location.y, 2) + Math.pow(position.z - location.z, 2));\n\n  var nextPos = {\n    x: position.x + velocity.x,\n    y: position.y + velocity.y,\n    z: position.z + velocity.z\n  };\n\n  var nextRange = Math.sqrt(Math.pow(nextPos.x - location.x, 2) + Math.pow(nextPos.y - location.y, 2) + Math.pow(nextPos.z - location.z, 2));\n\n  var rangeRate = nextRange - currentRange;\n\n  function sign(value) {\n    return value >= 0 ? 1 : -1;\n  }\n\n  rangeRate *= sign(rangeRate);\n  var c = 299792.458; // Speed of light in km/s\n  return 1 + rangeRate / c;\n}\nmodule.exports = exports[\"default\"];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./dopplerFactor.js\n// module id = 6\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = propagate;\n\nvar _sgp = require('../sgp4');\n\nvar _sgp2 = _interopRequireDefault(_sgp);\n\nvar _jday = require('../gstime/jday');\n\nvar _jday2 = _interopRequireDefault(_jday);\n\nvar _constants = require('../constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction propagate() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  // Return a position and velocity vector for a given date and time.\n  var satrec = args[0];\n  var date = Array.prototype.slice.call(args, 1);\n  var j = _jday2.default.apply(undefined, _toConsumableArray(date));\n  var m = (j - satrec.jdsatepoch) * _constants.minutesPerDay;\n  return (0, _sgp2.default)(satrec, m);\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./propagate/propagate.js\n// module id = 7\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = twoline2satrec;\n\nvar _constants = require('../constants');\n\nvar _sgp4init = require('../sgp4init');\n\nvar _sgp4init2 = _interopRequireDefault(_sgp4init);\n\nvar _days2mdhms = require('../gstime/days2mdhms');\n\nvar _days2mdhms2 = _interopRequireDefault(_days2mdhms);\n\nvar _jday = require('../gstime/jday');\n\nvar _jday2 = _interopRequireDefault(_jday);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Return a Satellite imported from two lines of TLE data.\n *\n * Provide the two TLE lines as strings `longstr1` and `longstr2`,\n * and select which standard set of gravitational constants you want\n * by providing `gravity_constants`:\n *\n * `sgp4.propagation.wgs72` - Standard WGS 72 model\n * `sgp4.propagation.wgs84` - More recent WGS 84 model\n * `sgp4.propagation.wgs72old` - Legacy support for old SGP4 behavior\n *\n * Normally, computations are made using letious recent improvements\n * to the algorithm.  If you want to turn some of these off and go\n * back into \"afspc\" mode, then set `afspc_mode` to `True`.\n */\nfunction twoline2satrec(longstr1, longstr2) {\n  var opsmode = 'i';\n  var xpdotp = 1440.0 / (2.0 * _constants.pi); // 229.1831180523293;\n  var year = 0;\n\n  var satrec = {};\n  satrec.error = 0;\n\n  satrec.satnum = longstr1.substring(2, 7);\n\n  satrec.epochyr = parseInt(longstr1.substring(18, 20), 10);\n  satrec.epochdays = parseFloat(longstr1.substring(20, 32));\n  satrec.ndot = parseFloat(longstr1.substring(33, 43));\n  satrec.nddot = parseFloat('.' + parseInt(longstr1.substring(44, 50), 10) + 'E' + longstr1.substring(50, 52));\n  satrec.bstar = parseFloat(longstr1.substring(53, 54) + '.' + parseInt(longstr1.substring(54, 59), 10) + 'E' + longstr1.substring(59, 61));\n\n  // satrec.satnum   = longstr2.substring(2, 7);\n  satrec.inclo = parseFloat(longstr2.substring(8, 16));\n  satrec.nodeo = parseFloat(longstr2.substring(17, 25));\n  satrec.ecco = parseFloat('.' + longstr2.substring(26, 33));\n  satrec.argpo = parseFloat(longstr2.substring(34, 42));\n  satrec.mo = parseFloat(longstr2.substring(43, 51));\n  satrec.no = parseFloat(longstr2.substring(52, 63));\n\n  //  ---- find no, ndot, nddot ----\n  satrec.no /= xpdotp; //   rad/min\n  // satrec.nddot= satrec.nddot * Math.pow(10.0, nexp);\n  // satrec.bstar= satrec.bstar * Math.pow(10.0, ibexp);\n\n  //  ---- convert to sgp4 units ----\n  satrec.a = Math.pow(satrec.no * _constants.tumin, -2.0 / 3.0);\n  satrec.ndot /= xpdotp * 1440.0; //   ? * minperday\n  satrec.nddot /= xpdotp * 1440.0 * 1440;\n\n  //  ---- find standard orbital elements ----\n  satrec.inclo *= _constants.deg2rad;\n  satrec.nodeo *= _constants.deg2rad;\n  satrec.argpo *= _constants.deg2rad;\n  satrec.mo *= _constants.deg2rad;\n\n  satrec.alta = satrec.a * (1.0 + satrec.ecco) - 1.0;\n  satrec.altp = satrec.a * (1.0 - satrec.ecco) - 1.0;\n\n  // ----------------------------------------------------------------\n  // find sgp4epoch time of element set\n  // remember that sgp4 uses units of days from 0 jan 1950 (sgp4epoch)\n  // and minutes from the epoch (time)\n  // ----------------------------------------------------------------\n\n  // ---------------- temp fix for years from 1957-2056 -------------------\n  // --------- correct fix will occur when year is 4-digit in tle ---------\n\n  if (satrec.epochyr < 57) {\n    year = satrec.epochyr + 2000;\n  } else {\n    year = satrec.epochyr + 1900;\n  }\n\n  var mdhmsResult = (0, _days2mdhms2.default)(year, satrec.epochdays);\n  var mon = mdhmsResult.mon;\n  var day = mdhmsResult.day;\n  var hr = mdhmsResult.hr;\n  var minute = mdhmsResult.minute;\n  var sec = mdhmsResult.sec;\n  satrec.jdsatepoch = (0, _jday2.default)(year, mon, day, hr, minute, sec);\n\n  //  ---------------- initialize the orbit at sgp4epoch -------------------\n  (0, _sgp4init2.default)(satrec, {\n    opsmode: opsmode,\n    satn: satrec.satnum,\n    epoch: satrec.jdsatepoch - 2433281.5,\n    xbstar: satrec.bstar,\n\n    xecco: satrec.ecco,\n    xargpo: satrec.argpo,\n    xinclo: satrec.inclo,\n    xmo: satrec.mo,\n    xno: satrec.no,\n\n    xnodeo: satrec.nodeo\n  });\n\n  return satrec;\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./propagate/twoline2satrec.js\n// module id = 8\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = degreesLat;\n\nvar _constants = require('../constants');\n\nfunction degreesLat(radians) {\n  if (radians > _constants.pi / 2 || radians < -_constants.pi / 2) {\n    return 'Err';\n  }\n  return radians / (_constants.pi * 180);\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./transforms/degreesLat.js\n// module id = 9\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = degreesLong;\n\nvar _constants = require('../constants');\n\nfunction degreesLong(radians) {\n  var degrees = radians / (_constants.pi * 180) % 360;\n  if (degrees > 180) {\n    degrees = 360 - degrees;\n  } else if (degrees < -180) {\n    degrees = 360 + degrees;\n  }\n  return degrees;\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./transforms/degreesLong.js\n// module id = 10\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ecfToEci;\nfunction ecfToEci(ecfCoords, gmst) {\n  // ccar.colorado.edu/ASEN5070/handouts/coordsys.doc\n  //\n  // [X]     [C -S  0][X]\n  // [Y]  =  [S  C  0][Y]\n  // [Z]eci  [0  0  1][Z]ecf\n  //\n  var X = ecfCoords.x * Math.cos(gmst) - ecfCoords.y * Math.sin(gmst);\n  var Y = ecfCoords.x * Math.sin(gmst) + ecfCoords.y * Math.cos(gmst);\n  var Z = ecfCoords.z;\n  return { x: X, y: Y, z: Z };\n}\nmodule.exports = exports[\"default\"];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./transforms/ecfToEci.js\n// module id = 11\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ecfToLookAngles;\n\nvar _topocentric = require('./topocentric');\n\nvar _topocentric2 = _interopRequireDefault(_topocentric);\n\nvar _topocentricToLookAngles = require('./topocentricToLookAngles');\n\nvar _topocentricToLookAngles2 = _interopRequireDefault(_topocentricToLookAngles);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ecfToLookAngles(observerCoordsEcf, satelliteCoordsEcf) {\n  var topocentricCoords = (0, _topocentric2.default)(observerCoordsEcf, satelliteCoordsEcf);\n  return (0, _topocentricToLookAngles2.default)(topocentricCoords);\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./transforms/ecfToLookAngles.js\n// module id = 12\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = eciToEcf;\nfunction eciToEcf(eciCoords, gmst) {\n  // ccar.colorado.edu/ASEN5070/handouts/coordsys.doc\n  //\n  // [X]     [C -S  0][X]\n  // [Y]  =  [S  C  0][Y]\n  // [Z]eci  [0  0  1][Z]ecf\n  //\n  //\n  // Inverse:\n  // [X]     [C  S  0][X]\n  // [Y]  =  [-S C  0][Y]\n  // [Z]ecf  [0  0  1][Z]eci\n\n  var x = eciCoords.x * Math.cos(gmst) + eciCoords.y * Math.sin(gmst);\n  var y = eciCoords.x * -Math.sin(gmst) + eciCoords.y * Math.cos(gmst);\n  var z = eciCoords.z;\n\n  return {\n    x: x,\n    y: y,\n    z: z\n  };\n}\nmodule.exports = exports[\"default\"];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./transforms/eciToEcf.js\n// module id = 13\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = eciToGeodetic;\nfunction eciToGeodetic(eciCoords, gmst) {\n  // http://www.celestrak.com/columns/v02n03/\n  var a = 6378.137;\n  var b = 6356.7523142;\n  var R = Math.sqrt(eciCoords.x * eciCoords.x + eciCoords.y * eciCoords.y);\n  var f = (a - b) / a;\n  var e2 = 2 * f - f * f;\n  var longitude = Math.atan2(eciCoords.y, eciCoords.x) - gmst;\n  var kmax = 20;\n  var k = 0;\n  var latitude = Math.atan2(eciCoords.z, Math.sqrt(eciCoords.x * eciCoords.x + eciCoords.y * eciCoords.y));\n  var C = void 0;\n  while (k < kmax) {\n    C = 1 / Math.sqrt(1 - e2 * (Math.sin(latitude) * Math.sin(latitude)));\n    latitude = Math.atan2(eciCoords.z + a * C * e2 * Math.sin(latitude), R);\n    k += 1;\n  }\n  var height = R / Math.cos(latitude) - a * C;\n  return { longitude: longitude, latitude: latitude, height: height };\n}\nmodule.exports = exports[\"default\"];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./transforms/eciToGeodetic.js\n// module id = 14\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = dscom;\n\nvar _constants = require('./constants');\n\n/*-----------------------------------------------------------------------------\n *\n *                           procedure dscom\n *\n *  this procedure provides deep space common items used by both the secular\n *    and periodics subroutines.  input is provided as shown. this routine\n *    used to be called dpper, but the functions inside weren't well organized.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    epoch       -\n *    ep          - eccentricity\n *    argpp       - argument of perigee\n *    tc          -\n *    inclp       - inclination\n *    nodep       - right ascension of ascending node\n *    np          - mean motion\n *\n *  outputs       :\n *    sinim  , cosim  , sinomm , cosomm , snodm  , cnodm\n *    day         -\n *    e3          -\n *    ee2         -\n *    em          - eccentricity\n *    emsq        - eccentricity squared\n *    gam         -\n *    peo         -\n *    pgho        -\n *    pho         -\n *    pinco       -\n *    plo         -\n *    rtemsq      -\n *    se2, se3         -\n *    sgh2, sgh3, sgh4        -\n *    sh2, sh3, si2, si3, sl2, sl3, sl4         -\n *    s1, s2, s3, s4, s5, s6, s7          -\n *    ss1, ss2, ss3, ss4, ss5, ss6, ss7, sz1, sz2, sz3         -\n *    sz11, sz12, sz13, sz21, sz22, sz23, sz31, sz32, sz33        -\n *    xgh2, xgh3, xgh4, xh2, xh3, xi2, xi3, xl2, xl3, xl4         -\n *    nm          - mean motion\n *    z1, z2, z3, z11, z12, z13, z21, z22, z23, z31, z32, z33         -\n *    zmol        -\n *    zmos        -\n *\n *  locals        :\n *    a1, a2, a3, a4, a5, a6, a7, a8, a9, a10         -\n *    betasq      -\n *    cc          -\n *    ctem, stem        -\n *    x1, x2, x3, x4, x5, x6, x7, x8          -\n *    xnodce      -\n *    xnoi        -\n *    zcosg  , zsing  , zcosgl , zsingl , zcosh  , zsinh  , zcoshl , zsinhl ,\n *    zcosi  , zsini  , zcosil , zsinil ,\n *    zx          -\n *    zy          -\n *\n *  coupling      :\n *    none.\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\nfunction dscom(options) {\n  var epoch = options.epoch,\n      ep = options.ep,\n      argpp = options.argpp,\n      tc = options.tc,\n      inclp = options.inclp,\n      nodep = options.nodep,\n      np = options.np;\n\n\n  var a1 = void 0;\n  var a2 = void 0;\n  var a3 = void 0;\n  var a4 = void 0;\n  var a5 = void 0;\n  var a6 = void 0;\n  var a7 = void 0;\n  var a8 = void 0;\n  var a9 = void 0;\n  var a10 = void 0;\n  var cc = void 0;\n  var x1 = void 0;\n  var x2 = void 0;\n  var x3 = void 0;\n  var x4 = void 0;\n  var x5 = void 0;\n  var x6 = void 0;\n  var x7 = void 0;\n  var x8 = void 0;\n  var zcosg = void 0;\n  var zsing = void 0;\n  var zcosh = void 0;\n  var zsinh = void 0;\n  var zcosi = void 0;\n  var zsini = void 0;\n\n  var ss1 = void 0;\n  var ss2 = void 0;\n  var ss3 = void 0;\n  var ss4 = void 0;\n  var ss5 = void 0;\n  var ss6 = void 0;\n  var ss7 = void 0;\n  var sz1 = void 0;\n  var sz2 = void 0;\n  var sz3 = void 0;\n  var sz11 = void 0;\n  var sz12 = void 0;\n  var sz13 = void 0;\n  var sz21 = void 0;\n  var sz22 = void 0;\n  var sz23 = void 0;\n  var sz31 = void 0;\n  var sz32 = void 0;\n  var sz33 = void 0;\n  var s1 = void 0;\n  var s2 = void 0;\n  var s3 = void 0;\n  var s4 = void 0;\n  var s5 = void 0;\n  var s6 = void 0;\n  var s7 = void 0;\n  var z1 = void 0;\n  var z2 = void 0;\n  var z3 = void 0;\n  var z11 = void 0;\n  var z12 = void 0;\n  var z13 = void 0;\n  var z21 = void 0;\n  var z22 = void 0;\n  var z23 = void 0;\n  var z31 = void 0;\n  var z32 = void 0;\n  var z33 = void 0;\n\n  // -------------------------- constants -------------------------\n  var zes = 0.01675;\n  var zel = 0.05490;\n  var c1ss = 2.9864797e-6;\n  var c1l = 4.7968065e-7;\n  var zsinis = 0.39785416;\n  var zcosis = 0.91744867;\n  var zcosgs = 0.1945905;\n  var zsings = -0.98088458;\n\n  //  --------------------- local variables ------------------------\n  var nm = np;\n  var em = ep;\n  var snodm = Math.sin(nodep);\n  var cnodm = Math.cos(nodep);\n  var sinomm = Math.sin(argpp);\n  var cosomm = Math.cos(argpp);\n  var sinim = Math.sin(inclp);\n  var cosim = Math.cos(inclp);\n  var emsq = em * em;\n  var betasq = 1.0 - emsq;\n  var rtemsq = Math.sqrt(betasq);\n\n  //  ----------------- initialize lunar solar terms ---------------\n  var peo = 0.0;\n  var pinco = 0.0;\n  var plo = 0.0;\n  var pgho = 0.0;\n  var pho = 0.0;\n  var day = epoch + 18261.5 + tc / 1440.0;\n  var xnodce = (4.5236020 - 9.2422029e-4 * day) % _constants.twoPi;\n  var stem = Math.sin(xnodce);\n  var ctem = Math.cos(xnodce);\n  var zcosil = 0.91375164 - 0.03568096 * ctem;\n  var zsinil = Math.sqrt(1.0 - zcosil * zcosil);\n  var zsinhl = 0.089683511 * stem / zsinil;\n  var zcoshl = Math.sqrt(1.0 - zsinhl * zsinhl);\n  var gam = 5.8351514 + 0.0019443680 * day;\n  var zx = 0.39785416 * stem / zsinil;\n  var zy = zcoshl * ctem + 0.91744867 * zsinhl * stem;\n  zx = Math.atan2(zx, zy);\n  zx += gam - xnodce;\n  var zcosgl = Math.cos(zx);\n  var zsingl = Math.sin(zx);\n\n  //  ------------------------- do solar terms ---------------------\n  zcosg = zcosgs;\n  zsing = zsings;\n  zcosi = zcosis;\n  zsini = zsinis;\n  zcosh = cnodm;\n  zsinh = snodm;\n  cc = c1ss;\n  var xnoi = 1.0 / nm;\n\n  var lsflg = 0;\n  while (lsflg < 2) {\n    lsflg += 1;\n    a1 = zcosg * zcosh + zsing * zcosi * zsinh;\n    a3 = -zsing * zcosh + zcosg * zcosi * zsinh;\n    a7 = -zcosg * zsinh + zsing * zcosi * zcosh;\n    a8 = zsing * zsini;\n    a9 = zsing * zsinh + zcosg * zcosi * zcosh;\n    a10 = zcosg * zsini;\n    a2 = cosim * a7 + sinim * a8;\n    a4 = cosim * a9 + sinim * a10;\n    a5 = -sinim * a7 + cosim * a8;\n    a6 = -sinim * a9 + cosim * a10;\n\n    x1 = a1 * cosomm + a2 * sinomm;\n    x2 = a3 * cosomm + a4 * sinomm;\n    x3 = -a1 * sinomm + a2 * cosomm;\n    x4 = -a3 * sinomm + a4 * cosomm;\n    x5 = a5 * sinomm;\n    x6 = a6 * sinomm;\n    x7 = a5 * cosomm;\n    x8 = a6 * cosomm;\n\n    z31 = 12.0 * x1 * x1 - 3.0 * x3 * x3;\n    z32 = 24.0 * x1 * x2 - 6.0 * x3 * x4;\n    z33 = 12.0 * x2 * x2 - 3.0 * x4 * x4;\n\n    z1 = 3.0 * (a1 * a1 + a2 * a2) + z31 * emsq;\n    z2 = 6.0 * (a1 * a3 + a2 * a4) + z32 * emsq;\n    z3 = 3.0 * (a3 * a3 + a4 * a4) + z33 * emsq;\n\n    z11 = -6.0 * a1 * a5 + emsq * (-24.0 * x1 * x7 - 6.0 * x3 * x5);\n    z12 = -6.0 * (a1 * a6 + a3 * a5) + emsq * (-24.0 * (x2 * x7 + x1 * x8)) + -6.0 * (x3 * x6 + x4 * x5);\n    z13 = -6.0 * a3 * a6 + emsq * (-24.0 * x2 * x8 - 6.0 * x4 * x6);\n\n    z21 = 6.0 * a2 * a5 + emsq * (24.0 * x1 * x5 - 6.0 * x3 * x7);\n    z22 = 6.0 * (a4 * a5 + a2 * a6) + emsq * 24.0 * (x2 * x5 + x1 * x6) - 6.0 * (x4 * x7 + x3 * x8);\n    z23 = 6.0 * a4 * a6 + emsq * (24.0 * x2 * x6 - 6.0 * x4 * x8);\n\n    z1 = z1 + z1 + betasq * z31;\n    z2 = z2 + z2 + betasq * z32;\n    z3 = z3 + z3 + betasq * z33;\n    s3 = cc * xnoi;\n    s2 = -0.5 * s3 / rtemsq;\n    s4 = s3 * rtemsq;\n    s1 = -15.0 * em * s4;\n    s5 = x1 * x3 + x2 * x4;\n    s6 = x2 * x3 + x1 * x4;\n    s7 = x2 * x4 - x1 * x3;\n\n    //  ----------------------- do lunar terms -------------------\n    if (lsflg === 1) {\n      ss1 = s1;\n      ss2 = s2;\n      ss3 = s3;\n      ss4 = s4;\n      ss5 = s5;\n      ss6 = s6;\n      ss7 = s7;\n      sz1 = z1;\n      sz2 = z2;\n      sz3 = z3;\n      sz11 = z11;\n      sz12 = z12;\n      sz13 = z13;\n      sz21 = z21;\n      sz22 = z22;\n      sz23 = z23;\n      sz31 = z31;\n      sz32 = z32;\n      sz33 = z33;\n      zcosg = zcosgl;\n      zsing = zsingl;\n      zcosi = zcosil;\n      zsini = zsinil;\n      zcosh = zcoshl * cnodm + zsinhl * snodm;\n      zsinh = snodm * zcoshl - cnodm * zsinhl;\n      cc = c1l;\n    }\n  }\n\n  var zmol = (4.7199672 + (0.22997150 * day - gam)) % _constants.twoPi;\n  var zmos = (6.2565837 + 0.017201977 * day) % _constants.twoPi;\n\n  //  ------------------------ do solar terms ----------------------\n  var se2 = 2.0 * ss1 * ss6;\n  var se3 = 2.0 * ss1 * ss7;\n  var si2 = 2.0 * ss2 * sz12;\n  var si3 = 2.0 * ss2 * (sz13 - sz11);\n  var sl2 = -2.0 * ss3 * sz2;\n  var sl3 = -2.0 * ss3 * (sz3 - sz1);\n  var sl4 = -2.0 * ss3 * (-21.0 - 9.0 * emsq) * zes;\n  var sgh2 = 2.0 * ss4 * sz32;\n  var sgh3 = 2.0 * ss4 * (sz33 - sz31);\n  var sgh4 = -18.0 * ss4 * zes;\n  var sh2 = -2.0 * ss2 * sz22;\n  var sh3 = -2.0 * ss2 * (sz23 - sz21);\n\n  //  ------------------------ do lunar terms ----------------------\n  var ee2 = 2.0 * s1 * s6;\n  var e3 = 2.0 * s1 * s7;\n  var xi2 = 2.0 * s2 * z12;\n  var xi3 = 2.0 * s2 * (z13 - z11);\n  var xl2 = -2.0 * s3 * z2;\n  var xl3 = -2.0 * s3 * (z3 - z1);\n  var xl4 = -2.0 * s3 * (-21.0 - 9.0 * emsq) * zel;\n  var xgh2 = 2.0 * s4 * z32;\n  var xgh3 = 2.0 * s4 * (z33 - z31);\n  var xgh4 = -18.0 * s4 * zel;\n  var xh2 = -2.0 * s2 * z22;\n  var xh3 = -2.0 * s2 * (z23 - z21);\n\n  return {\n    snodm: snodm,\n    cnodm: cnodm,\n    sinim: sinim,\n    cosim: cosim,\n    sinomm: sinomm,\n\n    cosomm: cosomm,\n    day: day,\n    e3: e3,\n    ee2: ee2,\n    em: em,\n\n    emsq: emsq,\n    gam: gam,\n    peo: peo,\n    pgho: pgho,\n    pho: pho,\n\n    pinco: pinco,\n    plo: plo,\n    rtemsq: rtemsq,\n    se2: se2,\n    se3: se3,\n\n    sgh2: sgh2,\n    sgh3: sgh3,\n    sgh4: sgh4,\n    sh2: sh2,\n    sh3: sh3,\n\n    si2: si2,\n    si3: si3,\n    sl2: sl2,\n    sl3: sl3,\n    sl4: sl4,\n\n    s1: s1,\n    s2: s2,\n    s3: s3,\n    s4: s4,\n    s5: s5,\n\n    s6: s6,\n    s7: s7,\n    ss1: ss1,\n    ss2: ss2,\n    ss3: ss3,\n\n    ss4: ss4,\n    ss5: ss5,\n    ss6: ss6,\n    ss7: ss7,\n    sz1: sz1,\n\n    sz2: sz2,\n    sz3: sz3,\n    sz11: sz11,\n    sz12: sz12,\n    sz13: sz13,\n\n    sz21: sz21,\n    sz22: sz22,\n    sz23: sz23,\n    sz31: sz31,\n    sz32: sz32,\n\n    sz33: sz33,\n    xgh2: xgh2,\n    xgh3: xgh3,\n    xgh4: xgh4,\n    xh2: xh2,\n\n    xh3: xh3,\n    xi2: xi2,\n    xi3: xi3,\n    xl2: xl2,\n    xl3: xl3,\n\n    xl4: xl4,\n    nm: nm,\n    z1: z1,\n    z2: z2,\n    z3: z3,\n\n    z11: z11,\n    z12: z12,\n    z13: z13,\n    z21: z21,\n    z22: z22,\n\n    z23: z23,\n    z31: z31,\n    z32: z32,\n    z33: z33,\n    zmol: zmol,\n\n    zmos: zmos\n  };\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./dscom.js\n// module id = 15\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = dsinit;\n/*-----------------------------------------------------------------------------\n *\n *                           procedure dsinit\n *\n *  this procedure provides deep space contributions to mean motion dot due\n *    to geopotential resonance with half day and one day orbits.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    cosim, sinim-\n *    emsq        - eccentricity squared\n *    argpo       - argument of perigee\n *    s1, s2, s3, s4, s5      -\n *    ss1, ss2, ss3, ss4, ss5 -\n *    sz1, sz3, sz11, sz13, sz21, sz23, sz31, sz33 -\n *    t           - time\n *    tc          -\n *    gsto        - greenwich sidereal time                   rad\n *    mo          - mean anomaly\n *    mdot        - mean anomaly dot (rate)\n *    no          - mean motion\n *    nodeo       - right ascension of ascending node\n *    nodedot     - right ascension of ascending node dot (rate)\n *    xpidot      -\n *    z1, z3, z11, z13, z21, z23, z31, z33 -\n *    eccm        - eccentricity\n *    argpm       - argument of perigee\n *    inclm       - inclination\n *    mm          - mean anomaly\n *    xn          - mean motion\n *    nodem       - right ascension of ascending node\n *\n *  outputs       :\n *    em          - eccentricity\n *    argpm       - argument of perigee\n *    inclm       - inclination\n *    mm          - mean anomaly\n *    nm          - mean motion\n *    nodem       - right ascension of ascending node\n *    irez        - flag for resonance           0-none, 1-one day, 2-half day\n *    atime       -\n *    d2201, d2211, d3210, d3222, d4410, d4422, d5220, d5232, d5421, d5433    -\n *    dedt        -\n *    didt        -\n *    dmdt        -\n *    dndt        -\n *    dnodt       -\n *    domdt       -\n *    del1, del2, del3        -\n *    ses  , sghl , sghs , sgs  , shl  , shs  , sis  , sls\n *    theta       -\n *    xfact       -\n *    xlamo       -\n *    xli         -\n *    xni\n *\n *  locals        :\n *    ainv2       -\n *    aonv        -\n *    cosisq      -\n *    eoc         -\n *    f220, f221, f311, f321, f322, f330, f441, f442, f522, f523, f542, f543  -\n *    g200, g201, g211, g300, g310, g322, g410, g422, g520, g521, g532, g533  -\n *    sini2       -\n *    temp        -\n *    temp1       -\n *    theta       -\n *    xno2        -\n *\n *  coupling      :\n *    getgravconst\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\nfunction dsinit(options) {\n  var cosim = options.cosim,\n      emsq = options.emsq,\n      argpo = options.argpo,\n      s1 = options.s1,\n      s2 = options.s2,\n      s3 = options.s3,\n      s4 = options.s4,\n      s5 = options.s5,\n      sinim = options.sinim,\n      ss1 = options.ss1,\n      ss2 = options.ss2,\n      ss3 = options.ss3,\n      ss4 = options.ss4,\n      ss5 = options.ss5,\n      sz1 = options.sz1,\n      sz3 = options.sz3,\n      sz11 = options.sz11,\n      sz13 = options.sz13,\n      sz21 = options.sz21,\n      sz23 = options.sz23,\n      sz31 = options.sz31,\n      sz33 = options.sz33,\n      t = options.t,\n      tc = options.tc,\n      gsto = options.gsto,\n      mo = options.mo,\n      mdot = options.mdot,\n      no = options.no,\n      nodeo = options.nodeo,\n      nodedot = options.nodedot,\n      xpidot = options.xpidot,\n      z1 = options.z1,\n      z3 = options.z3,\n      z11 = options.z11,\n      z13 = options.z13,\n      z21 = options.z21,\n      z23 = options.z23,\n      z31 = options.z31,\n      z33 = options.z33,\n      ecco = options.ecco,\n      eccsq = options.eccsq,\n      em = options.em,\n      argpm = options.argpm,\n      inclm = options.inclm,\n      mm = options.mm,\n      nm = options.nm,\n      nodem = options.nodem,\n      irez = options.irez,\n      atime = options.atime,\n      d2201 = options.d2201,\n      d2211 = options.d2211,\n      d3210 = options.d3210,\n      d3222 = options.d3222,\n      d4410 = options.d4410,\n      d4422 = options.d4422,\n      d5220 = options.d5220,\n      d5232 = options.d5232,\n      d5421 = options.d5421,\n      d5433 = options.d5433,\n      dedt = options.dedt,\n      didt = options.didt,\n      dmdt = options.dmdt,\n      dnodt = options.dnodt,\n      domdt = options.domdt,\n      del1 = options.del1,\n      del2 = options.del2,\n      del3 = options.del3,\n      xfact = options.xfact,\n      xlamo = options.xlamo,\n      xli = options.xli,\n      xni = options.xni;\n\n  var f220 = void 0,\n      f221 = void 0,\n      f311 = void 0,\n      f321 = void 0,\n      f322 = void 0,\n      f330 = void 0,\n      f441 = void 0,\n      f442 = void 0,\n      f522 = void 0,\n      f523 = void 0,\n      f542 = void 0,\n      f543 = void 0;\n  var g200 = void 0,\n      g201 = void 0,\n      g211 = void 0,\n      g300 = void 0,\n      g310 = void 0,\n      g322 = void 0,\n      g410 = void 0,\n      g422 = void 0,\n      g520 = void 0,\n      g521 = void 0,\n      g532 = void 0,\n      g533 = void 0;\n  var sini2 = void 0,\n      temp = void 0,\n      temp1 = void 0,\n      theta = void 0,\n      xno2 = void 0,\n      ainv2 = void 0,\n      aonv = void 0,\n      cosisq = void 0,\n      eoc = void 0;\n\n  var q22 = 1.7891679e-6;\n  var q31 = 2.1460748e-6;\n  var q33 = 2.2123015e-7;\n  var root22 = 1.7891679e-6;\n  var root44 = 7.3636953e-9;\n  var root54 = 2.1765803e-9;\n  var rptim = 4.37526908801129966e-3; // equates to 7.29211514668855e-5 rad/sec\n  var root32 = 3.7393792e-7;\n  var root52 = 1.1428639e-7;\n  var x2o3 = 2.0 / 3.0;\n  var znl = 1.5835218e-4;\n  var zns = 1.19459e-5;\n\n  //  -------------------- deep space initialization ------------\n  irez = 0;\n  if (nm > 0.0034906585 < 0.0052359877) {\n    irez = 1;\n  }\n  if (nm >= 8.26e-3 <= 9.24e-3 && em >= 0.5) {\n    irez = 2;\n  }\n\n  //  ------------------------ do solar terms -------------------\n  var ses = ss1 * zns * ss5;\n  var sis = ss2 * zns * (sz11 + sz13);\n  var sls = -zns * ss3 * (sz1 + sz3 - 14.0 - 6.0 * emsq);\n  var sghs = ss4 * zns * (sz31 + sz33 - 6.0);\n  var shs = -zns * ss2 * (sz21 + sz23);\n\n  //  sgp4fix for 180 deg incl\n  if (inclm < 5.2359877e-2 || inclm > constants.pi - 5.2359877e-2) {\n    shs = 0.0;\n  }\n  if (sinim !== 0.0) {\n    shs /= sinim;\n  }\n  var sgs = sghs - cosim * shs;\n\n  //  ------------------------- do lunar terms ------------------\n  dedt = ses + s1 * znl * s5;\n  didt = sis + s2 * znl * (z11 + z13);\n  dmdt = sls - znl * s3 * (z1 + z3 - 14.0 - 6.0 * emsq);\n  var sghl = s4 * znl * (z31 + z33 - 6.0);\n  var shll = -znl * s2 * (z21 + z23);\n  //  sgp4fix for 180 deg incl\n  if (inclm < 5.2359877e-2 || inclm > constants.pi - 5.2359877e-2) {\n    shll = 0.0;\n  }\n  domdt = sgs + sghl;\n  dnodt = shs;\n  if (sinim !== 0.0) {\n    domdt -= cosim / sinim * shll;\n    dnodt += shll / sinim;\n  }\n\n  //  ----------- calculate deep space resonance effects --------\n  var dndt = 0.0;\n  theta = (gsto + tc * rptim) % constants.twoPi;\n  em += dedt * t;\n  inclm += didt * t;\n  argpm += domdt * t;\n  nodem += dnodt * t;\n  mm += dmdt * t;\n\n  //   sgp4fix for negative inclinations\n  //   the following if statement should be commented out\n  // if (inclm < 0.0)\n  //  {\n  //    inclm  = -inclm;\n  //    argpm  = argpm - pi;\n  //    nodem = nodem + pi;\n  //  }\n\n\n  //  -------------- initialize the resonance terms -------------\n  if (irez !== 0) {\n    aonv = Math.pow(nm / constants.xke, x2o3);\n    //  ---------- geopotential resonance for 12 hour orbits ------\n    if (irez === 2) {\n      cosisq = cosim * cosim;\n      var emo = em;\n      em = ecco;\n      var emsqo = emsq;\n      emsq = eccsq;\n      eoc = em * emsq;\n      g201 = -0.306 - (em - 0.64) * 0.440;\n\n      if (em <= 0.65) {\n        g211 = 3.616 - 13.2470 * em + 16.2900 * emsq;\n        g310 = -19.302 + 117.3900 * em - 228.4190 * emsq + 156.5910 * eoc;\n        g322 = -18.9068 + 109.7927 * em - 214.6334 * emsq + 146.5816 * eoc;\n        g410 = -41.122 + 242.6940 * em - 471.0940 * emsq + 313.9530 * eoc;\n        g422 = -146.407 + 841.8800 * em - 1629.014 * emsq + 1083.4350 * eoc;\n        g520 = -532.114 + 3017.977 * em - 5740.032 * emsq + 3708.2760 * eoc;\n      } else {\n        g211 = -72.099 + 331.819 * em - 508.738 * emsq + 266.724 * eoc;\n        g310 = -346.844 + 1582.851 * em - 2415.925 * emsq + 1246.113 * eoc;\n        g322 = -342.585 + 1554.908 * em - 2366.899 * emsq + 1215.972 * eoc;\n        g410 = -1052.797 + 4758.686 * em - 7193.992 * emsq + 3651.957 * eoc;\n        g422 = -3581.690 + 16178.110 * em - 24462.770 * emsq + 12422.520 * eoc;\n        if (em > 0.715) {\n          g520 = -5149.66 + 29936.92 * em - 54087.36 * emsq + 31324.56 * eoc;\n        } else {\n          g520 = 1464.74 - 4664.75 * em + 3763.64 * emsq;\n        }\n      }\n      if (em < 0.7) {\n        g533 = -919.22770 + 4988.6100 * em - 9064.7700 * emsq + 5542.21 * eoc;\n        g521 = -822.71072 + 4568.6173 * em - 8491.4146 * emsq + 5337.524 * eoc;\n        g532 = -853.66600 + 4690.2500 * em - 8624.7700 * emsq + 5341.4 * eoc;\n      } else {\n        g533 = -37995.780 + 161616.52 * em - 229838.20 * emsq + 109377.94 * eoc;\n        g521 = -51752.104 + 218913.95 * em - 309468.16 * emsq + 146349.42 * eoc;\n        g532 = -40023.880 + 170470.89 * em - 242699.48 * emsq + 115605.82 * eoc;\n      }\n      sini2 = sinim * sinim;\n      f220 = 0.75 * (1.0 + 2.0 * cosim + cosisq);\n      f221 = 1.5 * sini2;\n      f321 = 1.875 * sinim * (1.0 - 2.0 * cosim - 3.0 * cosisq);\n      f322 = -1.875 * sinim * (1.0 + 2.0 * cosim - 3.0 * cosisq);\n      f441 = 35.0 * sini2 * f220;\n      f442 = 39.3750 * sini2 * sini2;\n      f522 = 9.84375 * sinim * (sini2 * (1.0 - 2.0 * cosim - 5.0 * cosisq) + 0.33333333 * (-2.0 + 4.0 * cosim + 6.0 * cosisq));\n      f523 = sinim * (4.92187512 * sini2 * (-2.0 - 4.0 * cosim + 10.0 * cosisq) + 6.56250012 * (1.0 + 2.0 * cosim - 3.0 * cosisq));\n      f542 = 29.53125 * sinim * (2.0 - 8.0 * cosim + cosisq * (-12.0 + 8.0 * cosim + 10.0 * cosisq));\n      f543 = 29.53125 * sinim * (-2.0 - 8.0 * cosim + cosisq * (12.0 + 8.0 * cosim - 10.0 * cosisq));\n\n      xno2 = nm * nm;\n      ainv2 = aonv * aonv;\n      temp1 = 3.0 * xno2 * ainv2;\n      temp = temp1 * root22;\n      d2201 = temp * f220 * g201;\n      d2211 = temp * f221 * g211;\n      temp1 *= aonv;\n      temp = temp1 * root32;\n      d3210 = temp * f321 * g310;\n      d3222 = temp * f322 * g322;\n      temp1 *= aonv;\n      temp = 2.0 * temp1 * root44;\n      d4410 = temp * f441 * g410;\n      d4422 = temp * f442 * g422;\n      temp1 *= aonv;\n      temp = temp1 * root52;\n      d5220 = temp * f522 * g520;\n      d5232 = temp * f523 * g532;\n      temp = 2.0 * temp1 * root54;\n      d5421 = temp * f542 * g521;\n      d5433 = temp * f543 * g533;\n      xlamo = (mo + nodeo + nodeo - theta - theta) % constants.twoPi;\n      xfact = mdot + dmdt + 2.0 * (nodedot + dnodt - rptim) - no;\n      em = emo;\n      emsq = emsqo;\n    }\n    //  ---------------- synchronous resonance terms --------------\n    if (irez === 1) {\n      g200 = 1.0 + emsq * (-2.5 + 0.8125 * emsq);\n      g310 = 1.0 + 2.0 * emsq;\n      g300 = 1.0 + emsq * (-6.0 + 6.60937 * emsq);\n      f220 = 0.75 * (1.0 + cosim) * (1.0 + cosim);\n      f311 = 0.9375 * sinim * sinim * (1.0 + 3.0 * cosim) - 0.75 * (1.0 + cosim);\n      f330 = 1.0 + cosim;\n      f330 = 1.875 * f330 * f330 * f330;\n      del1 = 3.0 * nm * nm * aonv * aonv;\n      del2 = 2.0 * del1 * f220 * g200 * q22;\n      del3 = 3.0 * del1 * f330 * g300 * q33 * aonv;\n      del1 = del1 * f311 * g310 * q31 * aonv;\n      xlamo = (mo + nodeo + argpo - theta) % constants.twoPi;\n      xfact = mdot + xpidot - rptim + dmdt + domdt + dnodt - no;\n    }\n    //  ------------ for sgp4, initialize the integrator ----------\n    xli = xlamo;\n    xni = no;\n    atime = 0.0;\n    nm = no + dndt;\n  }\n\n  return {\n    em: em,\n    argpm: argpm,\n    inclm: inclm,\n    mm: mm,\n    nm: nm,\n    nodem: nodem,\n\n    irez: irez,\n    atime: atime,\n\n    d2201: d2201,\n    d2211: d2211,\n    d3210: d3210,\n    d3222: d3222,\n    d4410: d4410,\n\n    d4422: d4422,\n    d5220: d5220,\n    d5232: d5232,\n    d5421: d5421,\n    d5433: d5433,\n\n    dedt: dedt,\n    didt: didt,\n    dmdt: dmdt,\n    dndt: dndt,\n    dnodt: dnodt,\n    domdt: domdt,\n\n    del1: del1,\n    del2: del2,\n    del3: del3,\n\n    xfact: xfact,\n    xlamo: xlamo,\n    xli: xli,\n    xni: xni\n  };\n}\nmodule.exports = exports[\"default\"];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./dsinit.js\n// module id = 16\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = dspace;\n\nvar _constants = require('./constants');\n\n/*-----------------------------------------------------------------------------\n *\n *                           procedure dspace\n *\n *  this procedure provides deep space contributions to mean elements for\n *    perturbing third body.  these effects have been averaged over one\n *    revolution of the sun and moon.  for earth resonance effects, the\n *    effects have been averaged over no revolutions of the satellite.\n *    (mean motion)\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    d2201, d2211, d3210, d3222, d4410, d4422, d5220, d5232, d5421, d5433 -\n *    dedt        -\n *    del1, del2, del3  -\n *    didt        -\n *    dmdt        -\n *    dnodt       -\n *    domdt       -\n *    irez        - flag for resonance           0-none, 1-one day, 2-half day\n *    argpo       - argument of perigee\n *    argpdot     - argument of perigee dot (rate)\n *    t           - time\n *    tc          -\n *    gsto        - gst\n *    xfact       -\n *    xlamo       -\n *    no          - mean motion\n *    atime       -\n *    em          - eccentricity\n *    ft          -\n *    argpm       - argument of perigee\n *    inclm       - inclination\n *    xli         -\n *    mm          - mean anomaly\n *    xni         - mean motion\n *    nodem       - right ascension of ascending node\n *\n *  outputs       :\n *    atime       -\n *    em          - eccentricity\n *    argpm       - argument of perigee\n *    inclm       - inclination\n *    xli         -\n *    mm          - mean anomaly\n *    xni         -\n *    nodem       - right ascension of ascending node\n *    dndt        -\n *    nm          - mean motion\n *\n *  locals        :\n *    delt        -\n *    ft          -\n *    theta       -\n *    x2li        -\n *    x2omi       -\n *    xl          -\n *    xldot       -\n *    xnddt       -\n *    xndt        -\n *    xomi        -\n *\n *  coupling      :\n *    none        -\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\nfunction dspace(options) {\n  var irez = options.irez,\n      d2201 = options.d2201,\n      d2211 = options.d2211,\n      d3210 = options.d3210,\n      d3222 = options.d3222,\n      d4410 = options.d4410,\n      d4422 = options.d4422,\n      d5220 = options.d5220,\n      d5232 = options.d5232,\n      d5421 = options.d5421,\n      d5433 = options.d5433,\n      dedt = options.dedt,\n      del1 = options.del1,\n      del2 = options.del2,\n      del3 = options.del3,\n      didt = options.didt,\n      dmdt = options.dmdt,\n      dnodt = options.dnodt,\n      domdt = options.domdt,\n      argpo = options.argpo,\n      argpdot = options.argpdot,\n      t = options.t,\n      tc = options.tc,\n      gsto = options.gsto,\n      xfact = options.xfact,\n      xlamo = options.xlamo,\n      no = options.no;\n  var atime = options.atime,\n      em = options.em,\n      argpm = options.argpm,\n      inclm = options.inclm,\n      xli = options.xli,\n      mm = options.mm,\n      xni = options.xni,\n      nodem = options.nodem,\n      nm = options.nm;\n\n\n  var fasx2 = 0.13130908;\n  var fasx4 = 2.8843198;\n  var fasx6 = 0.37448087;\n  var g22 = 5.7686396;\n  var g32 = 0.95240898;\n  var g44 = 1.8014998;\n  var g52 = 1.0508330;\n  var g54 = 4.4108898;\n  var rptim = 4.37526908801129966e-3; // equates to 7.29211514668855e-5 rad/sec\n  var stepp = 720.0;\n  var stepn = -720.0;\n  var step2 = 259200.0;\n\n  var delt = void 0;\n  var x2li = void 0;\n  var x2omi = void 0;\n  var xl = void 0;\n  var xldot = void 0;\n  var xnddt = void 0;\n  var xndt = void 0;\n  var xomi = void 0;\n  var dndt = 0.0;\n  var ft = 0.0;\n\n  //  ----------- calculate deep space resonance effects -----------\n  var theta = (gsto + tc * rptim) % _constants.twoPi;\n  em += dedt * t;\n\n  inclm += didt * t;\n  argpm += domdt * t;\n  nodem += dnodt * t;\n  mm += dmdt * t;\n\n  // sgp4fix for negative inclinations\n  // the following if statement should be commented out\n  // if (inclm < 0.0)\n  // {\n  //   inclm = -inclm;\n  //   argpm = argpm - pi;\n  //   nodem = nodem + pi;\n  // }\n\n  /* - update resonances : numerical (euler-maclaurin) integration - */\n  /* ------------------------- epoch restart ----------------------  */\n  //   sgp4fix for propagator problems\n  //   the following integration works for negative time steps and periods\n  //   the specific changes are unknown because the original code was so convoluted\n\n  // sgp4fix take out atime = 0.0 and fix for faster operation\n\n  if (irez !== 0) {\n    //  sgp4fix streamline check\n    if (atime === 0.0 || t * atime <= 0.0 || Math.abs(t) < Math.abs(atime)) {\n      atime = 0.0;\n      xni = no;\n      xli = xlamo;\n    }\n\n    // sgp4fix move check outside loop\n    if (t > 0.0) {\n      delt = stepp;\n    } else {\n      delt = stepn;\n    }\n\n    var iretn = 381; // added for do loop\n    while (iretn === 381) {\n      //  ------------------- dot terms calculated -------------\n      //  ----------- near - synchronous resonance terms -------\n      if (irez !== 2) {\n        xndt = del1 * Math.sin(xli - fasx2) + del2 * Math.sin(2.0 * (xli - fasx4)) + del3 * Math.sin(3.0 * (xli - fasx6));\n        xldot = xni + xfact;\n        xnddt = del1 * Math.cos(xli - fasx2) + 2.0 * del2 * Math.cos(2.0 * (xli - fasx4)) + 3.0 * del3 * Math.cos(3.0 * (xli - fasx6));\n        xnddt *= xldot;\n      } else {\n        // --------- near - half-day resonance terms --------\n        xomi = argpo + argpdot * atime;\n        x2omi = xomi + xomi;\n        x2li = xli + xli;\n        xndt = d2201 * Math.sin(x2omi + xli - g22) + d2211 * Math.sin(xli - g22) + d3210 * Math.sin(xomi + xli - g32) + d3222 * Math.sin(-xomi + xli - g32) + d4410 * Math.sin(x2omi + x2li - g44) + d4422 * Math.sin(x2li - g44) + d5220 * Math.sin(xomi + xli - g52) + d5232 * Math.sin(-xomi + xli - g52) + d5421 * Math.sin(xomi + x2li - g54) + d5433 * Math.sin(-xomi + x2li - g54);\n        xldot = xni + xfact;\n        xnddt = d2201 * Math.cos(x2omi + xli - g22) + d2211 * Math.cos(xli - g22) + d3210 * Math.cos(xomi + xli - g32) + d3222 * Math.cos(-xomi + xli - g32) + d5220 * Math.cos(xomi + xli - g52) + d5232 * Math.cos(-xomi + xli - g52) + 2.0 * d4410 * Math.cos(x2omi + x2li - g44) + d4422 * Math.cos(x2li - g44) + d5421 * Math.cos(xomi + x2li - g54) + d5433 * Math.cos(-xomi + x2li - g54);\n        xnddt *= xldot;\n      }\n\n      //  ----------------------- integrator -------------------\n      //  sgp4fix move end checks to end of routine\n      if (Math.abs(t - atime) >= stepp) {\n        iretn = 381;\n      } else {\n        ft = t - atime;\n        iretn = 0;\n      }\n\n      if (iretn === 381) {\n        xli += xldot * delt + xndt * step2;\n        xni += xndt * delt + xnddt * step2;\n        atime += delt;\n      }\n    }\n\n    nm = xni + xndt * ft + xnddt * ft * ft * 0.5;\n    xl = xli + xldot * ft + xndt * ft * ft * 0.5;\n    if (irez !== 1) {\n      mm = xl - (2.0 * nodem + 2.0 * theta);\n      dndt = nm - no;\n    } else {\n      mm = xl - nodem - argpm + theta;\n      dndt = nm - no;\n    }\n    nm = no + dndt;\n  }\n\n  return {\n    atime: atime,\n    em: em,\n    argpm: argpm,\n    inclm: inclm,\n    xli: xli,\n    mm: mm,\n    xni: xni,\n    nodem: nodem,\n    dndt: dndt,\n    nm: nm\n  };\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./dspace.js\n// module id = 17\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = days2mdhms;\n/* -----------------------------------------------------------------------------\n *\n *                           procedure days2mdhms\n *\n *  this procedure converts the day of the year, days, to the equivalent month\n *    day, hour, minute and second.\n *\n *  algorithm     : set up array for the number of days per month\n *                  find leap year - use 1900 because 2000 is a leap year\n *                  loop through a temp value while the value is < the days\n *                  perform int conversions to the correct day and month\n *                  convert remainder into h m s using type conversions\n *\n *  author        : david vallado                  719-573-2600    1 mar 2001\n *\n *  inputs          description                    range / units\n *    year        - year                           1900 .. 2100\n *    days        - julian day of the year         0.0  .. 366.0\n *\n *  outputs       :\n *    mon         - month                          1 .. 12\n *    day         - day                            1 .. 28,29,30,31\n *    hr          - hour                           0 .. 23\n *    min         - minute                         0 .. 59\n *    sec         - second                         0.0 .. 59.999\n *\n *  locals        :\n *    dayofyr     - day of year\n *    temp        - temporary extended values\n *    inttemp     - temporary int value\n *    i           - index\n *    lmonth[12]  - int array containing the number of days per month\n *\n *  coupling      :\n *    none.\n * --------------------------------------------------------------------------- */\nfunction days2mdhms(year, days) {\n  var lmonth = [31, year % 4 === 0 ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  var dayofyr = Math.floor(days);\n\n  //  ----------------- find month and day of month ----------------\n  var i = 1;\n  var inttemp = 0;\n  while (dayofyr > inttemp + lmonth[i - 1] && i < 12) {\n    inttemp += lmonth[i - 1];\n    i += 1;\n  }\n\n  var mon = i;\n  var day = dayofyr - inttemp;\n\n  //  ----------------- find hours minutes and seconds -------------\n  var temp = (days - dayofyr) * 24.0;\n  var hr = Math.floor(temp);\n  temp = (temp - hr) * 60.0;\n  var minute = Math.floor(temp);\n  var sec = (temp - minute) * 60.0;\n\n  return {\n    mon: mon,\n    day: day,\n    hr: hr,\n    minute: minute,\n    sec: sec\n  };\n}\nmodule.exports = exports[\"default\"];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./gstime/days2mdhms.js\n// module id = 18\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _constants = require('./constants');\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nvar _degreesLat = require('./transforms/degreesLat');\n\nvar _degreesLat2 = _interopRequireDefault(_degreesLat);\n\nvar _degreesLong = require('./transforms/degreesLong');\n\nvar _degreesLong2 = _interopRequireDefault(_degreesLong);\n\nvar _eciToEcf = require('./transforms/eciToEcf');\n\nvar _eciToEcf2 = _interopRequireDefault(_eciToEcf);\n\nvar _ecfToEci = require('./transforms/ecfToEci');\n\nvar _ecfToEci2 = _interopRequireDefault(_ecfToEci);\n\nvar _eciToGeodetic = require('./transforms/eciToGeodetic');\n\nvar _eciToGeodetic2 = _interopRequireDefault(_eciToGeodetic);\n\nvar _ecfToLookAngles = require('./transforms/ecfToLookAngles');\n\nvar _ecfToLookAngles2 = _interopRequireDefault(_ecfToLookAngles);\n\nvar _geodeticToEcf = require('./transforms/geodeticToEcf');\n\nvar _geodeticToEcf2 = _interopRequireDefault(_geodeticToEcf);\n\nvar _dopplerFactor = require('./dopplerFactor');\n\nvar _dopplerFactor2 = _interopRequireDefault(_dopplerFactor);\n\nvar _gstime = require('./gstime/gstime');\n\nvar _gstime2 = _interopRequireDefault(_gstime);\n\nvar _jday = require('./gstime/jday');\n\nvar _jday2 = _interopRequireDefault(_jday);\n\nvar _propagate = require('./propagate/propagate');\n\nvar _propagate2 = _interopRequireDefault(_propagate);\n\nvar _twoline2satrec = require('./propagate/twoline2satrec');\n\nvar _twoline2satrec2 = _interopRequireDefault(_twoline2satrec);\n\nvar _sgp = require('./sgp4');\n\nvar _sgp2 = _interopRequireDefault(_sgp);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n  version: '1.4.0',\n  constants: _constants2.default,\n\n  // Coordinate transforms\n  degreesLat: _degreesLat2.default,\n  degreesLong: _degreesLong2.default,\n  eciToEcf: _eciToEcf2.default,\n  ecfToEci: _ecfToEci2.default,\n  eciToGeodetic: _eciToGeodetic2.default,\n  ecfToLookAngles: _ecfToLookAngles2.default,\n  geodeticToEcf: _geodeticToEcf2.default,\n\n  dopplerFactor: _dopplerFactor2.default,\n\n  gstimeFromJday: _gstime2.default,\n  gstimeFromDate: function gstimeFromDate() {\n    return (0, _gstime2.default)(_jday2.default.apply(undefined, arguments));\n  },\n  jday: _jday2.default,\n\n  propagate: _propagate2.default,\n  twoline2satrec: _twoline2satrec2.default,\n  sgp4: _sgp2.default\n};\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./index.js\n// module id = 19\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = initl;\n\nvar _gstime = require('./gstime/gstime');\n\nvar _gstime2 = _interopRequireDefault(_gstime);\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*-----------------------------------------------------------------------------\n *\n *                           procedure initl\n *\n *  this procedure initializes the spg4 propagator. all the initialization is\n *    consolidated here instead of having multiple loops inside other routines.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    ecco        - eccentricity                           0.0 - 1.0\n *    epoch       - epoch time in days from jan 0, 1950. 0 hr\n *    inclo       - inclination of satellite\n *    no          - mean motion of satellite\n *    satn        - satellite number\n *\n *  outputs       :\n *    ainv        - 1.0 / a\n *    ao          - semi major axis\n *    con41       -\n *    con42       - 1.0 - 5.0 cos(i)\n *    cosio       - cosine of inclination\n *    cosio2      - cosio squared\n *    eccsq       - eccentricity squared\n *    method      - flag for deep space                    'd', 'n'\n *    omeosq      - 1.0 - ecco * ecco\n *    posq        - semi-parameter squared\n *    rp          - radius of perigee\n *    rteosq      - square root of (1.0 - ecco*ecco)\n *    sinio       - sine of inclination\n *    gsto        - gst at time of observation               rad\n *    no          - mean motion of satellite\n *\n *  locals        :\n *    ak          -\n *    d1          -\n *    del         -\n *    adel        -\n *    po          -\n *\n *  coupling      :\n *    getgravconst\n *    gstime      - find greenwich sidereal time from the julian date\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\nfunction initl(initlParameters) {\n  var ecco = initlParameters.ecco,\n      epoch = initlParameters.epoch,\n      inclo = initlParameters.inclo,\n      no = initlParameters.no,\n      method = initlParameters.method,\n      opsmode = initlParameters.opsmode;\n\n  var ak = void 0,\n      d1 = void 0,\n      adel = void 0,\n      po = void 0,\n      gsto = void 0;\n\n  // sgp4fix use old way of finding gst\n  //  ----------------------- earth constants ----------------------\n  //  sgp4fix identify constants and allow alternate values\n\n  //  ------------- calculate auxillary epoch quantities ----------\n  var eccsq = ecco * ecco;\n  var omeosq = 1.0 - eccsq;\n  var rteosq = Math.sqrt(omeosq);\n  var cosio = Math.cos(inclo);\n  var cosio2 = cosio * cosio;\n\n  //  ------------------ un-kozai the mean motion -----------------\n  ak = Math.pow(_constants.xke / no, _constants.x2o3);\n  d1 = 0.75 * _constants.j2 * (3.0 * cosio2 - 1.0) / (rteosq * omeosq);\n  var delPrime = d1 / (ak * ak);\n  adel = ak * (1.0 - delPrime * delPrime - delPrime * (1.0 / 3.0 + 134.0 * delPrime * delPrime / 81.0));\n  delPrime = d1 / (adel * adel);\n  no /= 1.0 + delPrime;\n\n  var ao = Math.pow(_constants.xke / no, _constants.x2o3);\n  var sinio = Math.sin(inclo);\n  po = ao * omeosq;\n  var con42 = 1.0 - 5.0 * cosio2;\n  var con41 = -con42 - cosio2 - cosio2;\n  var ainv = 1.0 / ao;\n  var posq = po * po;\n  var rp = ao * (1.0 - ecco);\n  method = 'n';\n\n  //  sgp4fix modern approach to finding sidereal time\n  if (opsmode === 'a') {\n    //  sgp4fix use old way of finding gst\n    //  count integer number of days from 0 jan 1970\n    var ts70 = epoch - 7305.0;\n    var ds70 = Math.floor(ts70 + 1.0e-8);\n    var tfrac = ts70 - ds70;\n    //  find greenwich location at epoch\n    var c1 = 1.72027916940703639e-2;\n    var thgr70 = 1.7321343856509374;\n    var fk5r = 5.07551419432269442e-15;\n    var c1p2p = c1 + _constants.twoPi;\n    gsto = (thgr70 + c1 * ds70 + c1p2p * tfrac + ts70 * ts70 * fk5r) % _constants.twoPi;\n    if (gsto < 0.0) {\n      gsto += _constants.twoPi;\n    }\n  } else {\n    gsto = (0, _gstime2.default)(epoch + 2433281.5);\n  }\n\n  return {\n    no: no,\n\n    method: method,\n\n    ainv: ainv,\n    ao: ao,\n    con41: con41,\n    con42: con42,\n    cosio: cosio,\n\n    cosio2: cosio2,\n    eccsq: eccsq,\n    omeosq: omeosq,\n    posq: posq,\n\n    rp: rp,\n    rteosq: rteosq,\n    sinio: sinio,\n    gsto: gsto\n  };\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./initl.js\n// module id = 20\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = sgp4init;\n\nvar _dpper = require('./dpper');\n\nvar _dpper2 = _interopRequireDefault(_dpper);\n\nvar _dscom = require('./dscom');\n\nvar _dscom2 = _interopRequireDefault(_dscom);\n\nvar _dsinit = require('./dsinit');\n\nvar _dsinit2 = _interopRequireDefault(_dsinit);\n\nvar _initl = require('./initl');\n\nvar _initl2 = _interopRequireDefault(_initl);\n\nvar _sgp = require('./sgp4');\n\nvar _sgp2 = _interopRequireDefault(_sgp);\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*-----------------------------------------------------------------------------\n *\n *                             procedure sgp4init\n *\n *  this procedure initializes variables for sgp4.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    opsmode     - mode of operation afspc or improved 'a', 'i'\n *    satn        - satellite number\n *    bstar       - sgp4 type drag coefficient              kg/m2er\n *    ecco        - eccentricity\n *    epoch       - epoch time in days from jan 0, 1950. 0 hr\n *    argpo       - argument of perigee (output if ds)\n *    inclo       - inclination\n *    mo          - mean anomaly (output if ds)\n *    no          - mean motion\n *    nodeo       - right ascension of ascending node\n *\n *  outputs       :\n *    satrec      - common values for subsequent calls\n *    return code - non-zero on error.\n *                   1 - mean elements, ecc >= 1.0 or ecc < -0.001 or a < 0.95 er\n *                   2 - mean motion less than 0.0\n *                   3 - pert elements, ecc < 0.0  or  ecc > 1.0\n *                   4 - semi-latus rectum < 0.0\n *                   5 - epoch elements are sub-orbital\n *                   6 - satellite has decayed\n *\n *  locals        :\n *    cnodm  , snodm  , cosim  , sinim  , cosomm , sinomm\n *    cc1sq  , cc2    , cc3\n *    coef   , coef1\n *    cosio4      -\n *    day         -\n *    dndt        -\n *    em          - eccentricity\n *    emsq        - eccentricity squared\n *    eeta        -\n *    etasq       -\n *    gam         -\n *    argpm       - argument of perigee\n *    nodem       -\n *    inclm       - inclination\n *    mm          - mean anomaly\n *    nm          - mean motion\n *    perige      - perigee\n *    pinvsq      -\n *    psisq       -\n *    qzms24      -\n *    rtemsq      -\n *    s1, s2, s3, s4, s5, s6, s7          -\n *    sfour       -\n *    ss1, ss2, ss3, ss4, ss5, ss6, ss7         -\n *    sz1, sz2, sz3\n *    sz11, sz12, sz13, sz21, sz22, sz23, sz31, sz32, sz33        -\n *    tc          -\n *    temp        -\n *    temp1, temp2, temp3       -\n *    tsi         -\n *    xpidot      -\n *    xhdot1      -\n *    z1, z2, z3          -\n *    z11, z12, z13, z21, z22, z23, z31, z32, z33         -\n *\n *  coupling      :\n *    getgravconst-\n *    initl       -\n *    dscom       -\n *    dpper       -\n *    dsinit      -\n *    sgp4        -\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\nfunction sgp4init(satrec, options) {\n  var opsmode = options.opsmode,\n      satn = options.satn,\n      epoch = options.epoch,\n      xbstar = options.xbstar,\n      xecco = options.xecco,\n      xargpo = options.xargpo,\n      xinclo = options.xinclo,\n      xmo = options.xmo,\n      xno = options.xno,\n      xnodeo = options.xnodeo;\n\n  var cnodm = void 0,\n      snodm = void 0,\n      cosim = void 0,\n      sinim = void 0,\n      cosomm = void 0,\n      sinomm = void 0,\n      cc1sq = void 0,\n      cc2 = void 0,\n      cc3 = void 0,\n      coef = void 0,\n      coef1 = void 0,\n      cosio4 = void 0,\n      day = void 0,\n      dndt = void 0,\n      em = void 0,\n      emsq = void 0,\n      eeta = void 0,\n      etasq = void 0,\n      gam = void 0,\n      argpm = void 0,\n      nodem = void 0,\n      inclm = void 0,\n      mm = void 0,\n      nm = void 0,\n      perige = void 0,\n      pinvsq = void 0,\n      psisq = void 0,\n      qzms24 = void 0,\n      rtemsq = void 0,\n      s1 = void 0,\n      s2 = void 0,\n      s3 = void 0,\n      s4 = void 0,\n      s5 = void 0,\n      s6 = void 0,\n      s7 = void 0,\n      sfour = void 0,\n      ss1 = void 0,\n      ss2 = void 0,\n      ss3 = void 0,\n      ss4 = void 0,\n      ss5 = void 0,\n      ss6 = void 0,\n      ss7 = void 0,\n      sz1 = void 0,\n      sz2 = void 0,\n      sz3 = void 0,\n      sz11 = void 0,\n      sz12 = void 0,\n      sz13 = void 0,\n      sz21 = void 0,\n      sz22 = void 0,\n      sz23 = void 0,\n      sz31 = void 0,\n      sz32 = void 0,\n      sz33 = void 0,\n      tc = void 0,\n      temp = void 0,\n      temp1 = void 0,\n      temp2 = void 0,\n      temp3 = void 0,\n      temp4 = void 0,\n      tsi = void 0,\n      xpidot = void 0,\n      xhdot1 = void 0,\n      z1 = void 0,\n      z2 = void 0,\n      z3 = void 0,\n      z11 = void 0,\n      z12 = void 0,\n      z13 = void 0,\n      z21 = void 0,\n      z22 = void 0,\n      z23 = void 0,\n      z31 = void 0,\n      z32 = void 0,\n      z33 = void 0;\n  /* ------------------------ initialization --------------------- */\n  // sgp4fix divisor for divide by zero check on inclination\n  // the old check used 1.0 + Math.cos(pi-1.0e-9), but then compared it to\n  // 1.5 e-12, so the threshold was changed to 1.5e-12 for consistency\n\n  temp4 = 1.5e-12;\n\n  //  ----------- set all near earth variables to zero ------------\n  satrec.isimp = 0;satrec.method = 'n';satrec.aycof = 0.0;\n  satrec.con41 = 0.0;satrec.cc1 = 0.0;satrec.cc4 = 0.0;\n  satrec.cc5 = 0.0;satrec.d2 = 0.0;satrec.d3 = 0.0;\n  satrec.d4 = 0.0;satrec.delmo = 0.0;satrec.eta = 0.0;\n  satrec.argpdot = 0.0;satrec.omgcof = 0.0;satrec.sinmao = 0.0;\n  satrec.t = 0.0;satrec.t2cof = 0.0;satrec.t3cof = 0.0;\n  satrec.t4cof = 0.0;satrec.t5cof = 0.0;satrec.x1mth2 = 0.0;\n  satrec.x7thm1 = 0.0;satrec.mdot = 0.0;satrec.nodedot = 0.0;\n  satrec.xlcof = 0.0;satrec.xmcof = 0.0;satrec.nodecf = 0.0;\n\n  //  ----------- set all deep space variables to zero ------------\n  satrec.irez = 0;satrec.d2201 = 0.0;satrec.d2211 = 0.0;\n  satrec.d3210 = 0.0;satrec.d3222 = 0.0;satrec.d4410 = 0.0;\n  satrec.d4422 = 0.0;satrec.d5220 = 0.0;satrec.d5232 = 0.0;\n  satrec.d5421 = 0.0;satrec.d5433 = 0.0;satrec.dedt = 0.0;\n  satrec.del1 = 0.0;satrec.del2 = 0.0;satrec.del3 = 0.0;\n  satrec.didt = 0.0;satrec.dmdt = 0.0;satrec.dnodt = 0.0;\n  satrec.domdt = 0.0;satrec.e3 = 0.0;satrec.ee2 = 0.0;\n  satrec.peo = 0.0;satrec.pgho = 0.0;satrec.pho = 0.0;\n  satrec.pinco = 0.0;satrec.plo = 0.0;satrec.se2 = 0.0;\n  satrec.se3 = 0.0;satrec.sgh2 = 0.0;satrec.sgh3 = 0.0;\n  satrec.sgh4 = 0.0;satrec.sh2 = 0.0;satrec.sh3 = 0.0;\n  satrec.si2 = 0.0;satrec.si3 = 0.0;satrec.sl2 = 0.0;\n  satrec.sl3 = 0.0;satrec.sl4 = 0.0;satrec.gsto = 0.0;\n  satrec.xfact = 0.0;satrec.xgh2 = 0.0;satrec.xgh3 = 0.0;\n  satrec.xgh4 = 0.0;satrec.xh2 = 0.0;satrec.xh3 = 0.0;\n  satrec.xi2 = 0.0;satrec.xi3 = 0.0;satrec.xl2 = 0.0;\n  satrec.xl3 = 0.0;satrec.xl4 = 0.0;satrec.xlamo = 0.0;\n  satrec.zmol = 0.0;satrec.zmos = 0.0;satrec.atime = 0.0;\n  satrec.xli = 0.0;satrec.xni = 0.0;\n\n  // sgp4fix - note the following variables are also passed directly via satrec.\n  // it is possible to streamline the sgp4init call by deleting the \"x\"\n  // variables, but the user would need to set the satrec.* values first. we\n  // include the additional assignments in case twoline2rv is not used.\n\n  satrec.bstar = xbstar;\n  satrec.ecco = xecco;\n  satrec.argpo = xargpo;\n  satrec.inclo = xinclo;\n  satrec.mo = xmo;\n  satrec.no = xno;\n  satrec.nodeo = xnodeo;\n\n  //  sgp4fix add opsmode\n  satrec.operationmode = opsmode;\n\n  //  ------------------------ earth constants -----------------------\n  //  sgp4fix identify constants and allow alternate values\n\n\n  var ss = 78.0 / _constants.earthRadius + 1.0;\n  //  sgp4fix use multiply for speed instead of pow\n  var qzms2ttemp = (120.0 - 78.0) / _constants.earthRadius;\n  var qzms2t = qzms2ttemp * qzms2ttemp * qzms2ttemp * qzms2ttemp;\n  var x2o3 = 2.0 / 3.0;\n\n  satrec.init = 'y';\n  satrec.t = 0.0;\n\n  var initlParameters = {\n    satn: satn,\n    ecco: satrec.ecco,\n\n    epoch: epoch,\n    inclo: satrec.inclo,\n    no: satrec.no,\n\n    method: satrec.method,\n    opsmode: satrec.operationmode\n  };\n\n  var initlResult = (0, _initl2.default)(initlParameters);\n\n  satrec.no = initlResult.no;\n\n  // TODO: defined but never used\n  // var method      = initlResult.method;\n  // var ainv        = initlResult.ainv;\n\n  var ao = initlResult.ao;\n  satrec.con41 = initlResult.con41;\n  var con42 = initlResult.con42;\n  var cosio = initlResult.cosio;\n  var cosio2 = initlResult.cosio2;\n  var eccsq = initlResult.eccsq;\n  var omeosq = initlResult.omeosq;\n  var posq = initlResult.posq;\n  var rp = initlResult.rp;\n  var rteosq = initlResult.rteosq;\n  var sinio = initlResult.sinio;\n  satrec.gsto = initlResult.gsto;\n\n  satrec.error = 0;\n\n  // sgp4fix remove this check as it is unnecessary\n  // the mrt check in sgp4 handles decaying satellite cases even if the starting\n  // condition is below the surface of te earth\n  //     if (rp < 1.0)\n  //       {\n  //         printf(\"// *** satn%d epoch elts sub-orbital ***\\n\", satn);\n  //         satrec.error = 5;\n  //       }\n\n\n  if (omeosq >= 0.0 || satrec.no >= 0.0) {\n    satrec.isimp = 0;\n    if (rp < 220.0 / _constants.earthRadius + 1.0) {\n      satrec.isimp = 1;\n    }\n    sfour = ss;\n    qzms24 = qzms2t;\n    perige = (rp - 1.0) * _constants.earthRadius;\n\n    //  - for perigees below 156 km, s and qoms2t are altered -\n    if (perige < 156.0) {\n      sfour = perige - 78.0;\n      if (perige < 98.0) {\n        sfour = 20.0;\n      }\n      //  sgp4fix use multiply for speed instead of pow\n      var qzms24temp = (120.0 - sfour) / _constants.earthRadius;\n      qzms24 = qzms24temp * qzms24temp * qzms24temp * qzms24temp;\n      sfour = sfour / _constants.earthRadius + 1.0;\n    }\n    pinvsq = 1.0 / posq;\n\n    tsi = 1.0 / (ao - sfour);\n    satrec.eta = ao * satrec.ecco * tsi;\n    etasq = satrec.eta * satrec.eta;\n    eeta = satrec.ecco * satrec.eta;\n    psisq = Math.abs(1.0 - etasq);\n    coef = qzms24 * Math.pow(tsi, 4.0);\n    coef1 = coef / Math.pow(psisq, 3.5);\n    cc2 = coef1 * satrec.no * (ao * (1.0 + 1.5 * etasq + eeta * (4.0 + etasq)) + 0.375 * _constants.j2 * tsi / psisq * satrec.con41 * (8.0 + 3.0 * etasq * (8.0 + etasq)));\n    satrec.cc1 = satrec.bstar * cc2;\n    cc3 = 0.0;\n    if (satrec.ecco > 1.0e-4) {\n      cc3 = -2.0 * coef * tsi * _constants.j3oj2 * satrec.no * sinio / satrec.ecco;\n    }\n    satrec.x1mth2 = 1.0 - cosio2;\n    satrec.cc4 = 2.0 * satrec.no * coef1 * ao * omeosq * (satrec.eta * (2.0 + 0.5 * etasq) + satrec.ecco * (0.5 + 2.0 * etasq) - _constants.j2 * tsi / (ao * psisq) * (-3.0 * satrec.con41 * (1.0 - 2.0 * eeta + etasq * (1.5 - 0.5 * eeta)) + 0.75 * satrec.x1mth2 * (2.0 * etasq - eeta * (1.0 + etasq)) * Math.cos(2.0 * satrec.argpo)));\n    satrec.cc5 = 2.0 * coef1 * ao * omeosq * (1.0 + 2.75 * (etasq + eeta) + eeta * etasq);\n    cosio4 = cosio2 * cosio2;\n    temp1 = 1.5 * _constants.j2 * pinvsq * satrec.no;\n    temp2 = 0.5 * temp1 * _constants.j2 * pinvsq;\n    temp3 = -0.46875 * _constants.j4 * pinvsq * pinvsq * satrec.no;\n    satrec.mdot = satrec.no + 0.5 * temp1 * rteosq * satrec.con41 + 0.0625 * temp2 * rteosq * (13.0 - 78.0 * cosio2 + 137.0 * cosio4);\n    satrec.argpdot = -0.5 * temp1 * con42 + 0.0625 * temp2 * (7.0 - 114.0 * cosio2 + 395.0 * cosio4) + temp3 * (3.0 - 36.0 * cosio2 + 49.0 * cosio4);\n    xhdot1 = -temp1 * cosio;\n    satrec.nodedot = xhdot1 + (0.5 * temp2 * (4.0 - 19.0 * cosio2) + 2.0 * temp3 * (3.0 - 7.0 * cosio2)) * cosio;\n    xpidot = satrec.argpdot + satrec.nodedot;\n    satrec.omgcof = satrec.bstar * cc3 * Math.cos(satrec.argpo);\n    satrec.xmcof = 0.0;\n    if (satrec.ecco > 1.0e-4) {\n      satrec.xmcof = -x2o3 * coef * satrec.bstar / eeta;\n    }\n    satrec.nodecf = 3.5 * omeosq * xhdot1 * satrec.cc1;\n    satrec.t2cof = 1.5 * satrec.cc1;\n    //  sgp4fix for divide by zero with xinco = 180 deg\n    if (Math.abs(cosio + 1.0) > 1.5e-12) {\n      satrec.xlcof = -0.25 * _constants.j3oj2 * sinio * (3.0 + 5.0 * cosio) / (1.0 + cosio);\n    } else {\n      satrec.xlcof = -0.25 * _constants.j3oj2 * sinio * (3.0 + 5.0 * cosio) / temp4;\n    }\n    satrec.aycof = -0.5 * _constants.j3oj2 * sinio;\n    //  sgp4fix use multiply for speed instead of pow\n    var delmotemp = 1.0 + satrec.eta * Math.cos(satrec.mo);\n    satrec.delmo = delmotemp * delmotemp * delmotemp;\n    satrec.sinmao = Math.sin(satrec.mo);\n    satrec.x7thm1 = 7.0 * cosio2 - 1.0;\n\n    //  --------------- deep space initialization -------------\n    if (2 * _constants.pi / satrec.no >= 225.0) {\n      satrec.method = 'd';\n      satrec.isimp = 1;\n      tc = 0.0;\n      inclm = satrec.inclo;\n\n      var dscomParameters = {\n        epoch: epoch,\n        ep: satrec.ecco,\n        argpp: satrec.argpo,\n        tc: tc,\n        inclp: satrec.inclo,\n        nodep: satrec.nodeo,\n\n        np: satrec.no,\n\n        e3: satrec.e3,\n        ee2: satrec.ee2,\n\n        peo: satrec.peo,\n        pgho: satrec.pgho,\n        pho: satrec.pho,\n        pinco: satrec.pinco,\n\n        plo: satrec.plo,\n        se2: satrec.se2,\n        se3: satrec.se3,\n\n        sgh2: satrec.sgh2,\n        sgh3: satrec.sgh3,\n        sgh4: satrec.sgh4,\n\n        sh2: satrec.sh2,\n        sh3: satrec.sh3,\n        si2: satrec.si2,\n        si3: satrec.si3,\n\n        sl2: satrec.sl2,\n        sl3: satrec.sl3,\n        sl4: satrec.sl4,\n\n        xgh2: satrec.xgh2,\n        xgh3: satrec.xgh3,\n        xgh4: satrec.xgh4,\n        xh2: satrec.xh2,\n\n        xh3: satrec.xh3,\n        xi2: satrec.xi2,\n        xi3: satrec.xi3,\n        xl2: satrec.xl2,\n\n        xl3: satrec.xl3,\n        xl4: satrec.xl4,\n\n        zmol: satrec.zmol,\n        zmos: satrec.zmos\n      };\n\n      var dscomResult = (0, _dscom2.default)(dscomParameters);\n\n      snodm = dscomResult.snodm;\n      cnodm = dscomResult.cnodm;\n      sinim = dscomResult.sinim;\n      cosim = dscomResult.cosim;\n      sinomm = dscomResult.sinomm;\n\n      cosomm = dscomResult.cosomm;\n      day = dscomResult.day;\n      satrec.e3 = dscomResult.e3;\n      satrec.ee2 = dscomResult.ee2;\n      em = dscomResult.em;\n\n      emsq = dscomResult.emsq;\n      gam = dscomResult.gam;\n      satrec.peo = dscomResult.peo;\n      satrec.pgho = dscomResult.pgho;\n      satrec.pho = dscomResult.pho;\n\n      satrec.pinco = dscomResult.pinco;\n      satrec.plo = dscomResult.plo;\n      rtemsq = dscomResult.rtemsq;\n      satrec.se2 = dscomResult.se2;\n      satrec.se3 = dscomResult.se3;\n\n      satrec.sgh2 = dscomResult.sgh2;\n      satrec.sgh3 = dscomResult.sgh3;\n      satrec.sgh4 = dscomResult.sgh4;\n      satrec.sh2 = dscomResult.sh2;\n      satrec.sh3 = dscomResult.sh3;\n\n      satrec.si2 = dscomResult.si2;\n      satrec.si3 = dscomResult.si3;\n      satrec.sl2 = dscomResult.sl2;\n      satrec.sl3 = dscomResult.sl3;\n      satrec.sl4 = dscomResult.sl4;\n\n      s1 = dscomResult.s1;\n      s2 = dscomResult.s2;\n      s3 = dscomResult.s3;\n      s4 = dscomResult.s4;\n      s5 = dscomResult.s5;\n\n      s6 = dscomResult.s6;\n      s7 = dscomResult.s7;\n      ss1 = dscomResult.ss1;\n      ss2 = dscomResult.ss2;\n      ss3 = dscomResult.ss3;\n\n      ss4 = dscomResult.ss4;\n      ss5 = dscomResult.ss5;\n      ss6 = dscomResult.ss6;\n      ss7 = dscomResult.ss7;\n      sz1 = dscomResult.sz1;\n\n      sz2 = dscomResult.sz2;\n      sz3 = dscomResult.sz3;\n      sz11 = dscomResult.sz11;\n      sz12 = dscomResult.sz12;\n      sz13 = dscomResult.sz13;\n\n      sz21 = dscomResult.sz21;\n      sz22 = dscomResult.sz22;\n      sz23 = dscomResult.sz23;\n      sz31 = dscomResult.sz31;\n      sz32 = dscomResult.sz32;\n\n      sz33 = dscomResult.sz33;\n      satrec.xgh2 = dscomResult.xgh2;\n      satrec.xgh3 = dscomResult.xgh3;\n      satrec.xgh4 = dscomResult.xgh4;\n      satrec.xh2 = dscomResult.xh2;\n\n      satrec.xh3 = dscomResult.xh3;\n      satrec.xi2 = dscomResult.xi2;\n      satrec.xi3 = dscomResult.xi3;\n      satrec.xl2 = dscomResult.xl2;\n      satrec.xl3 = dscomResult.xl3;\n\n      satrec.xl4 = dscomResult.xl4;\n      nm = dscomResult.nm;\n      z1 = dscomResult.z1;\n      z2 = dscomResult.z2;\n      z3 = dscomResult.z3;\n\n      z11 = dscomResult.z11;\n      z12 = dscomResult.z12;\n      z13 = dscomResult.z13;\n      z21 = dscomResult.z21;\n      z22 = dscomResult.z22;\n\n      z23 = dscomResult.z23;\n      z31 = dscomResult.z31;\n      z32 = dscomResult.z32;\n      z33 = dscomResult.z33;\n      satrec.zmol = dscomResult.zmol;\n      satrec.zmos = dscomResult.zmos;\n\n      var dpperParameters = {\n        inclo: inclm,\n        init: satrec.init,\n        ep: satrec.ecco,\n        inclp: satrec.inclo,\n        nodep: satrec.nodeo,\n        argpp: satrec.argpo,\n        mp: satrec.mo,\n        opsmode: satrec.operationmode\n      };\n\n      var dpperResult = (0, _dpper2.default)(satrec, dpperParameters);\n\n      satrec.ecco = dpperResult.ep;\n      satrec.inclo = dpperResult.inclp;\n      satrec.nodeo = dpperResult.nodep;\n      satrec.argpo = dpperResult.argpp;\n      satrec.mo = dpperResult.mp;\n\n      argpm = 0.0;\n      nodem = 0.0;\n      mm = 0.0;\n\n      var dsinitParameters = {\n        cosim: cosim,\n        emsq: emsq,\n        argpo: satrec.argpo,\n        s1: s1,\n        s2: s2,\n        s3: s3,\n        s4: s4,\n        s5: s5,\n        sinim: sinim,\n        ss1: ss1,\n        ss2: ss2,\n        ss3: ss3,\n        ss4: ss4,\n        ss5: ss5,\n        sz1: sz1,\n        sz3: sz3,\n        sz11: sz11,\n        sz13: sz13,\n        sz21: sz21,\n        sz23: sz23,\n        sz31: sz31,\n        sz33: sz33,\n        t: satrec.t,\n        tc: tc,\n        gsto: satrec.gsto,\n        mo: satrec.mo,\n        mdot: satrec.mdot,\n        no: satrec.no,\n        nodeo: satrec.nodeo,\n        nodedot: satrec.nodedot,\n        xpidot: xpidot,\n        z1: z1,\n        z3: z3,\n        z11: z11,\n        z13: z13,\n        z21: z21,\n        z23: z23,\n        z31: z31,\n        z33: z33,\n        ecco: satrec.ecco,\n        eccsq: eccsq,\n        em: em,\n        argpm: argpm,\n        inclm: inclm,\n        mm: mm,\n        nm: nm,\n        nodem: nodem,\n        irez: satrec.irez,\n        atime: satrec.atime,\n        d2201: satrec.d2201,\n        d2211: satrec.d2211,\n        d3210: satrec.d3210,\n        d3222: satrec.d3222,\n        d4410: satrec.d4410,\n        d4422: satrec.d4422,\n        d5220: satrec.d5220,\n        d5232: satrec.d5232,\n        d5421: satrec.d5421,\n        d5433: satrec.d5433,\n        dedt: satrec.dedt,\n        didt: satrec.didt,\n        dmdt: satrec.dmdt,\n        dnodt: satrec.dnodt,\n        domdt: satrec.domdt,\n        del1: satrec.del1,\n        del2: satrec.del2,\n        del3: satrec.del3,\n        xfact: satrec.xfact,\n        xlamo: satrec.xlamo,\n        xli: satrec.xli,\n        xni: satrec.xni\n      };\n\n      var dsinitResult = (0, _dsinit2.default)(dsinitParameters);\n\n      em = dsinitResult.em;\n      argpm = dsinitResult.argpm;\n      inclm = dsinitResult.inclm;\n      mm = dsinitResult.mm;\n      nm = dsinitResult.nm;\n\n      nodem = dsinitResult.nodem;\n      satrec.irez = dsinitResult.irez;\n      satrec.atime = dsinitResult.atime;\n      satrec.d2201 = dsinitResult.d2201;\n      satrec.d2211 = dsinitResult.d2211;\n\n      satrec.d3210 = dsinitResult.d3210;\n      satrec.d3222 = dsinitResult.d3222;\n      satrec.d4410 = dsinitResult.d4410;\n      satrec.d4422 = dsinitResult.d4422;\n      satrec.d5220 = dsinitResult.d5220;\n\n      satrec.d5232 = dsinitResult.d5232;\n      satrec.d5421 = dsinitResult.d5421;\n      satrec.d5433 = dsinitResult.d5433;\n      satrec.dedt = dsinitResult.dedt;\n      satrec.didt = dsinitResult.didt;\n\n      satrec.dmdt = dsinitResult.dmdt;\n      dndt = dsinitResult.dndt;\n      satrec.dnodt = dsinitResult.dnodt;\n      satrec.domdt = dsinitResult.domdt;\n      satrec.del1 = dsinitResult.del1;\n\n      satrec.del2 = dsinitResult.del2;\n      satrec.del3 = dsinitResult.del3;\n      satrec.xfact = dsinitResult.xfact;\n      satrec.xlamo = dsinitResult.xlamo;\n      satrec.xli = dsinitResult.xli;\n\n      satrec.xni = dsinitResult.xni;\n    }\n\n    // ----------- set variables if not deep space -----------\n    if (satrec.isimp !== 1) {\n      cc1sq = satrec.cc1 * satrec.cc1;\n      satrec.d2 = 4.0 * ao * tsi * cc1sq;\n      temp = satrec.d2 * tsi * satrec.cc1 / 3.0;\n      satrec.d3 = (17.0 * ao + sfour) * temp;\n      satrec.d4 = 0.5 * temp * ao * tsi * (221.0 * ao + 31.0 * sfour) * satrec.cc1;\n      satrec.t3cof = satrec.d2 + 2.0 * cc1sq;\n      satrec.t4cof = 0.25 * (3.0 * satrec.d3 + satrec.cc1 * (12.0 * satrec.d2 + 10.0 * cc1sq));\n      satrec.t5cof = 0.2 * (3.0 * satrec.d4 + 12.0 * satrec.cc1 * satrec.d3 + 6.0 * satrec.d2 * satrec.d2 + 15.0 * cc1sq * (2.0 * satrec.d2 + cc1sq));\n    }\n\n    /* finally propogate to zero epoch to initialize all others. */\n    // sgp4fix take out check to let satellites process until they are actually below earth surface\n    //  if(satrec.error == 0)\n  }\n  (0, _sgp2.default)(satrec, 0.0);\n\n  satrec.init = 'n';\n\n  // sgp4fix return boolean. satrec.error contains any error codes\n  return true;\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sgp4init.js\n// module id = 21\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = topocentric;\n\nvar _geodeticToEcf = require('./geodeticToEcf');\n\nvar _geodeticToEcf2 = _interopRequireDefault(_geodeticToEcf);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction topocentric(observerCoords, satelliteCoords) {\n  // http://www.celestrak.com/columns/v02n02/\n  // TS Kelso's method, except I'm using ECF frame\n  // and he uses ECI.\n\n  var longitude = observerCoords.longitude;\n  var latitude = observerCoords.latitude;\n\n  var observerEcf = (0, _geodeticToEcf2.default)(observerCoords);\n\n  var rx = satelliteCoords.x - observerEcf.x;\n  var ry = satelliteCoords.y - observerEcf.y;\n  var rz = satelliteCoords.z - observerEcf.z;\n\n  var topS = Math.sin(latitude) * Math.cos(longitude) * rx + Math.sin(latitude) * Math.sin(longitude) * ry - Math.cos(latitude) * rz;\n\n  var topE = -Math.sin(longitude) * rx + Math.cos(longitude) * ry;\n\n  var topZ = Math.cos(latitude) * Math.cos(longitude) * rx + Math.cos(latitude) * Math.sin(longitude) * ry + Math.sin(latitude) * rz;\n\n  return { topS: topS, topE: topE, topZ: topZ };\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./transforms/topocentric.js\n// module id = 22\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (topocentric) {\n  var topS = topocentric.topS,\n      topE = topocentric.topE,\n      topZ = topocentric.topZ;\n\n  var rangeSat = Math.sqrt(topS * topS + topE * topE + topZ * topZ);\n  var El = Math.asin(topZ / rangeSat);\n  var Az = Math.atan2(-topE, topS) + _constants.pi;\n\n  return {\n    azimuth: Az,\n    elevation: El,\n    rangeSat: rangeSat };\n};\n\nvar _constants = require('../constants');\n\nmodule.exports = exports['default'];\n\n/**\n * @param {Object} topocentric\n * @param {Number} topocentric.topS Positive horizontal vector S due south.\n * @param {Number} topocentric.topE Positive horizontal vector E due east.\n * @param {Number} topocentric.topZ Vector Z normal to the surface of the earth (up).\n * @returns {Object}\n */\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./transforms/topocentricToLookAngles.js\n// module id = 23\n// module chunks = 0"],"sourceRoot":""}